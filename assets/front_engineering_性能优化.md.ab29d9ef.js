import{_ as l,c as i,o as e,U as a}from"./chunks/framework.8a9b1808.js";const o="/cain-s-blog/assets/xingnengyouhua.ad84ceb4.webp",b=JSON.parse('{"title":"分析","description":"","frontmatter":{},"headers":[],"relativePath":"front/engineering/性能优化.md","filePath":"front/engineering/性能优化.md"}'),n={name:"front/engineering/性能优化.md"},s=a('<h1 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h1><p><img src="'+o+`" alt="xing"></p><ul><li>NetWork: 网络面板，用于侦测浏览器资源下载与上传的能耗视图。</li><li>Performance: 性能面板：用于侦测浏览器运行时的性能表现，得出项目运行的时序图，同时也可以分析页面的一些隐式问题，如 (内存泄漏)。</li><li>Lighthouse: 性能评测(灯塔)，基于当前浏览器页面的阶段性加载现状来为用户提供结果分析数据指标报告。</li><li>探针: 前端框架如React有相关Profiler的探针API和chrome插件，能够为开发者探测代码编写时的问题，避免重复或者是频繁异常的Repeat rendering。</li></ul><h2 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h2><ul><li>使用语义化标签和结构</li><li>减少HTTP请求</li><li>避免页面重定向 - 页面重定向会导致额外的HTTP请求和延迟，应避免不必要的重定向。</li><li>使用骨架屏</li><li>避免触发回流和重绘</li></ul><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><ul><li>避免过度约束</li><li>避免后代选择符</li><li>避免链式选择符</li><li>使用紧凑的语法</li><li>避免不必要的命名空间</li><li>避免不必要的重复</li><li>最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么</li><li>避免！important，可以选择其他选择器</li><li>尽可能的精简规则，你可以合并不同类里的重复规则</li></ul><h2 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h2><ul><li>避免过多的DOM操作</li><li>异步加载脚本</li><li>debounce throttle</li><li>优化循环</li><li>使用原生数据类型：重复的类型转换会消耗大量的性能</li><li>使用事件委托代理处理事件</li><li>RAF&amp;RDC：RAF&amp;RDC分别是requestAnimationFrame和requestIdleCallback</li><li>避免大量操作：如大量生成并添加元素；可以使用集合类型的数据来一次性添加多个元素</li><li>复杂操作移至后台：如数据处理、排序和过滤等</li><li>移除不必要的代码和文件</li><li>合理使用缓存：当服务器端资源发生变化时要正确使用缓存，可以使用 Etag、Last-Modified、Cache-Control 等方式来控制缓存的行为。</li></ul><p>以下是一些常用的延迟加载方法：</p><ol><li>延迟加载路由</li><li>延迟加载 Vuex 模块</li><li>延迟加载第三方库</li><li>延迟加载组件和图片</li><li>按需分割代码块</li><li>使用虚拟化列表、分页、无限滚动等技术优化大量数据</li></ol><h2 id="构建工具" tabindex="-1">构建工具 <a class="header-anchor" href="#构建工具" aria-label="Permalink to &quot;构建工具&quot;">​</a></h2><ul><li><p>resolve.modules：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>包体积大小</p></li><li><p>按需加载：针对项目中比较大型的工具类库，如lodash、UI Design、use-hooks等类库</p></li><li><p>CDN依赖：对于部分共有依赖可以将其放置在CDN中来进行加载</p></li><li><p>minify：</p><ul><li>JS 压缩：UglifyjsWebpackPlugin</li><li>HTML 压缩：HtmlWebpackPlugin</li><li>CSS 压缩：MiniCssExtractPlugin</li><li>图片压缩：image-webpack-loader</li></ul></li><li><p>Tree Shaking：ES6 的 import/export 来检查未引用代码，以及 sideEffects 来标记无副作用代码，最后用 <code>UglifyJSPlugin</code> 来做 <code>Tree Shaking</code>，从而删除冗余代码</p></li><li><p><code>webpack-bundle-analyzer</code> 分析当前项目中是否存在重复依赖, 影子依赖, 模块体积差异等等问题</p></li><li><p><code>speed-measure-webpack-plugin</code> 分析当前每个bundle模块打包构建时的时间数据，分别会包含<code>loader</code>, <code>plugin</code>等处理的时间</p></li><li><p>构建速度</p><ul><li>resolve.extensions：extensions:[&#39;js&#39;, &#39;json&#39;, &#39;jsx&#39;]</li><li>resolve.include/exclude</li><li>缓存：<code>cache</code> 或 <code>cache-loader</code>：在 <code>babel-loader</code> 开启 <code>cache</code> 后，将 <code>loader</code> 的编译结果写进硬盘缓存，再次构建如果文件没有发生变化则会直接拉取缓存。</li><li>多进程构建：thread-loader 和 Happypack</li><li>多进程压缩：TerserWebpackPlugin</li><li>Dll: dll可以将一些依赖库提前进行打包，能够有效的降低打包类库的次数</li></ul></li><li><p>资源加载</p><ul><li>静态资源分离：通过 DllPlugin 或者 Externals 进行静态依赖包的分离</li><li>代码分离：Code_Splitting 核心是 require-ensure 异步加载资源 SplitChunksPlugin</li><li>首页预载 关键页预载 接口优化 浏览器缓存: 策略大体上分为强缓存和协商缓存</li></ul></li></ul><h2 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h2><ul><li><p>使用v-if和v-show适当地控制组件的显示</p></li><li><p>使用虚拟列表</p></li><li><p>懒加载</p></li><li><p>Introduction to performance optimization and lazy loading.</p></li><li><p>Lazy loading routes and vendor bundle anti-pattern.</p></li><li><p>Lazy loading Vuex modules</p></li><li><p>Delivering good waiting experience and lazy loading individual components</p></li><li><p>Lazy loading libs and finding smaller equivalents</p></li><li><p>Performance-friendly usage of UI libraries</p></li><li><p>Making use of Service Worker cache</p></li><li><p>Prefetching</p></li></ul><h2 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h2><ul><li>使用useMemo()缓存计算结果</li><li>使用useCallback()缓存函数</li><li>使用useRef()访问DOM元素</li><li>使用useContext()避免组件传递</li><li>使用useEffect()加载数据</li><li>使用React.lazy()和Suspense异步加载模块</li><li>减少重渲染</li><li>使用React.lazy()和Code Splitting</li></ul><h2 id="服务器" tabindex="-1">服务器 <a class="header-anchor" href="#服务器" aria-label="Permalink to &quot;服务器&quot;">​</a></h2><ul><li>服务端渲染（Server-Side Rendering）：SSR 主要用于解决单页应用首屏渲染慢以及 SEO 问题</li><li>负载均衡 <ul><li>PM2：一款 Node.js 进程管理器，让计算机每一个内核都启动一个 Node.js 服务，并且实现自动控制负载均衡。</li><li>Nginx：通过轮询机制，将用户的请求分配到压力较小的服务器上（反向代理）。</li></ul></li></ul><h2 id="原则" tabindex="-1">原则 <a class="header-anchor" href="#原则" aria-label="Permalink to &quot;原则&quot;">​</a></h2><ul><li>单一职责原则</li><li>里氏替换原则</li><li>依赖倒置原则</li><li>接口隔离原则</li><li>迪米特原则</li><li>开放封闭原则</li></ul><h2 id="模式" tabindex="-1">模式 <a class="header-anchor" href="#模式" aria-label="Permalink to &quot;模式&quot;">​</a></h2><ul><li>工厂模式</li><li>单例模式</li><li>代理模式</li><li>中介者模式</li><li>发布-订阅模式（观察者模式）</li></ul>`,23),r=[s];function t(p,c,d,u,h,g){return e(),i("div",null,r)}const f=l(n,[["render",t]]);export{b as __pageData,f as default};
