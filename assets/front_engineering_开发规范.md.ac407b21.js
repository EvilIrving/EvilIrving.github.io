import{_ as s,c as a,o as n,U as l}from"./chunks/framework.8a9b1808.js";const e="/cain-s-blog/assets/开发流程.06ae3039.webp",o="/cain-s-blog/assets/2.13699ac3.webp",t="/cain-s-blog/assets/1.dfbde7cf.webp",p="/cain-s-blog/assets/3.ec623842.webp",g=JSON.parse('{"title":"划分","description":"","frontmatter":{},"headers":[],"relativePath":"front/engineering/开发规范.md","filePath":"front/engineering/开发规范.md"}'),c={name:"front/engineering/开发规范.md"},r=l('<h1 id="划分" tabindex="-1">划分 <a class="header-anchor" href="#划分" aria-label="Permalink to &quot;划分&quot;">​</a></h1><ul><li>开发流程规范</li><li>代码规范</li><li>git commit规范</li><li>项目文件结构规范</li><li>UI设计规范</li></ul><h2 id="开发流程规范" tabindex="-1">开发流程规范 <a class="header-anchor" href="#开发流程规范" aria-label="Permalink to &quot;开发流程规范&quot;">​</a></h2><p><img src="'+e+`" alt="开发流程"></p><h2 id="格式化规范" tabindex="-1">格式化规范 <a class="header-anchor" href="#格式化规范" aria-label="Permalink to &quot;格式化规范&quot;">​</a></h2><ol><li><p>安装依赖：<a href="https://prettier.io/" target="_blank" rel="noreferrer"><code>prettier</code></a></p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install --save-dev --save-exact prettier </span></span>
<span class="line"><span style="color:#A6ACCD;">// or</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn add --dev --exact prettier</span></span></code></pre></div></li><li><p>创建一个空配置文件,让编辑器和其他工具知道你正在使用 Prettier</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">echo {}&gt; .prettierrc.json</span></span></code></pre></div></li><li><p>创建一个.prettierignore文件，让 Prettier CLI 和编辑器知道哪些文件不能格式化，example</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># Ignore artifacts:</span></span>
<span class="line"><span style="color:#A6ACCD;">dist</span></span>
<span class="line"><span style="color:#A6ACCD;">build</span></span>
<span class="line"><span style="color:#A6ACCD;">coverage</span></span></code></pre></div></li><li><p>配置编辑器（VScode为例）</p><p>IDE中安装 <a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noreferrer"><code>Prettier-Code Formater</code></a> 插件： <img src="`+o+'" alt="图 13"><br> 找到IDE中设置模块，搜索 format On Save，勾上这个就可以了。 <img src="'+t+`" alt="图 13"></p></li><li><p>git commit 的阶段自动将提交的代码进行格式化</p><p>借助工具 <a href="https://github.com/typicode/husky" target="_blank" rel="noreferrer"><code>husky</code></a>，它主要可以帮助我们在 git 阶段检查提交消息、运行测试、检查代码等。</p><ul><li>安装 husky 和 ​​lint-staged：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">save</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dev husky lint</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">staged</span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky install</span></span>
<span class="line"><span style="color:#A6ACCD;">npm set</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">script prepare </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">husky install</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky add </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">husky</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">pre</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">commit </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">npx lint-staged</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// or</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn add </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">dev husky lint</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">staged</span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky install</span></span>
<span class="line"><span style="color:#A6ACCD;">npm set</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">script prepare </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">husky install</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky add </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">husky</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">pre</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">commit </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">npx lint-staged</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><ul><li>然后将以下内容添加到package.json中:</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//当执行 git commit 阶段前，先执行lint-staged，lint-staged中的内容就是对暂存区的文件执行格式化的命令。</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier --write --ignore-unknown</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>其他：若使用的是脚手架工具搭建的项目，会自带eslint配置（eslintConfig）。prettier 和 eslint 会有一些配置上的冲突，这个时候需要安装eslint-config-prettier 以使 ESLint 和 Prettier 相互配合，安装完后在.eslintrc中配置（以Create-React-App为例）：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># 用</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">的部分规则覆盖前面的规则</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslintConfig</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react-app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react-app/jest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span></code></pre></div></li></ol><h2 id="js-ts规范" tabindex="-1">JS/TS规范 <a class="header-anchor" href="#js-ts规范" aria-label="Permalink to &quot;JS/TS规范&quot;">​</a></h2><h3 id="常见规范" tabindex="-1">常见规范 <a class="header-anchor" href="#常见规范" aria-label="Permalink to &quot;常见规范&quot;">​</a></h3><ul><li><a href="./-.html">Airbnb JavaScript Style Guide</a></li><li><a href="./-.html">Google JavaScript Style Guide</a></li><li><a href="./-.html">Idiomatic JavaScript Style Guide</a></li><li><a href="./-.html">JavaScript Standard Style Guide</a></li><li><a href="./-.html">jQuery JavaScript Style Guide</a></li></ul><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><ol><li><p>安装依赖 <a href="https://eslint.org/docs/latest/user-guide/getting-started%E3%80%82" target="_blank" rel="noreferrer">eslint</a></p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install eslint --save-dev</span></span>
<span class="line"><span style="color:#A6ACCD;">// or</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn add eslint --dev</span></span></code></pre></div></li><li><p>生成配置文件</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm init @eslint/config</span></span>
<span class="line"><span style="color:#A6ACCD;">// or</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn create @eslint/config</span></span></code></pre></div></li><li><p>通过在<code>git commit</code>阶段校验，若不通过则取消提交。<br> 配置（在 <code>package.json</code> 中的 <code>lint-staged</code> ）：</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;lint-staged&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;**/*&quot;: &quot;prettier --write --ignore-unknown&quot;, //格式化</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;src/*&quot;: &quot;eslint --ext .js,.ts,.tsx&quot;  //进行eslint校验</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span></code></pre></div><blockquote><p>注意： 这里如果选用的<code>Typescript</code>，则会默认使用<code>@typescript-eslint/parser</code>解析器，官方为了追求更快的解析速度，并不会对.ts文件中的类型进行检查，只会做语法检测。</p></blockquote><blockquote><p>如果需要对类型也进行检测，需要在<code>extends</code>中加上<code>plugin:@typescript-eslint/recommended-requiring-type-checking</code>。</p></blockquote><blockquote><p>但是在笔者的使用中发现效果并不好，一些基本的类型依然检测不出来，索性这里换了另一种方式：在<code>pre commit</code>中执行<code>yarn run tsc</code>，这里的意思是对项目中ts文件进行类型检测，默认会读取根目录中的<code>tsconfig.jso</code>n配置。</p></blockquote><blockquote><p>这种方式并不完美，它的弊端就在于<strong>全量检测</strong>，如果项目不大还好，若是项目代码量够多，检测10-20s也是常有的事。</p></blockquote></li></ol><h2 id="css规范" tabindex="-1">CSS规范 <a class="header-anchor" href="#css规范" aria-label="Permalink to &quot;CSS规范&quot;">​</a></h2><p>使用 <code>stylelint</code> 插件，规范则推荐使用 <a href="https://github.com/stylelint/stylelint-config-standard" target="_blank" rel="noreferrer"><code>stylelint-config-standard</code></a></p><ol><li><p>安装</p></li><li><p>在项目的根目录中创建一个配置文件<code>.stylelintrc.json</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylelint-config-standard</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>解决与 <code>prettier</code> 配置的冲突：</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install --save-dev stylelint-config-prettier</span></span></code></pre></div></li><li><p>将下面配置复制到 <code>.stylelintrc.json</code> 中：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylelint-config-standard</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylelint-config-prettier</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>在 <code>git commit</code> 阶段进行检测：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier --write --ignore-unknown</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//格式化</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">src/**.{js,jsx,ts,tsx}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --ext .js,.jsx,.ts,.tsx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//对js文件检测</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">**/*.{less,css}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylelint --fix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//对css文件进行检测</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span></code></pre></div></li></ol><h2 id="自定义其他规范" tabindex="-1">自定义其他规范 <a class="header-anchor" href="#自定义其他规范" aria-label="Permalink to &quot;自定义其他规范&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 👍 明确函数意图，对于返回true or false的函数，最好以should/is/can/has开头</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shouldShowFriendsList</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isEmpty</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">canCreateDocuments</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hasLicense</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sendEmailToUser</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">user</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{....</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//动词开头，函数意图就很明显</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 👍 文件的顶部明确说明该组件做什么，有没有业务理解难点等等，对业务特殊函数/变量也需要写注释</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 👍 在文件头部导入，顺序依次为: 第三方库 &gt; 公共组件/方法 &gt; 非公共部分组件/方法</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">loadsh</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Header </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@components/header</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Content </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./Content</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 👍 在底部导出</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Content</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Header</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> Component</span></span></code></pre></div><h2 id="项目文件结构规范" tabindex="-1">项目文件结构规范 <a class="header-anchor" href="#项目文件结构规范" aria-label="Permalink to &quot;项目文件结构规范&quot;">​</a></h2><p>文件夹名称全部采用小写 + &quot;-&quot; 来隔开，index.ts用来做导出，通过对工具函数、hooks、api 等加上后缀，更加容易区分引入的文件。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">- src 开发目录</span></span>
<span class="line"><span style="color:#A6ACCD;">      - pages 视图</span></span>
<span class="line"><span style="color:#A6ACCD;">          - module-a 模块A</span></span>
<span class="line"><span style="color:#A6ACCD;">            - components 私有组件</span></span>
<span class="line"><span style="color:#A6ACCD;">              - ComA.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">              - ComB.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">            - index.module.less</span></span>
<span class="line"><span style="color:#A6ACCD;">            - index.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">            - Content.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">          - module-b 模块B</span></span>
<span class="line"><span style="color:#A6ACCD;">      - components 公共组件</span></span>
<span class="line"><span style="color:#A6ACCD;">        - index.ts 导出所有组件</span></span>
<span class="line"><span style="color:#A6ACCD;">        - header</span></span>
<span class="line"><span style="color:#A6ACCD;">          - index.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">          - index.module.less</span></span>
<span class="line"><span style="color:#A6ACCD;">          - User.tsx</span></span>
<span class="line"><span style="color:#A6ACCD;">          - useGetBaseInfo.hooks.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">      - routers 路由文件</span></span>
<span class="line"><span style="color:#A6ACCD;">      - store redux中的数据</span></span>
<span class="line"><span style="color:#A6ACCD;">      - utils 这里是以utils为后缀</span></span>
<span class="line"><span style="color:#A6ACCD;">        - index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">        - a.utils.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">        - b.utils.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">      - hooks 这里是以hooks为后缀</span></span>
<span class="line"><span style="color:#A6ACCD;">        - index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">        - a.hooks.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">        - b.hooks.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">      - styles 静态资源文件</span></span>
<span class="line"><span style="color:#A6ACCD;">      - service api请求,这里是以api为后缀</span></span>
<span class="line"><span style="color:#A6ACCD;">        - a.api.ts 按照后端微服务进行划分</span></span>
<span class="line"><span style="color:#A6ACCD;">        - b.api.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">      - constans 常量</span></span></code></pre></div><h2 id="git-commit规范" tabindex="-1">Git commit规范 <a class="header-anchor" href="#git-commit规范" aria-label="Permalink to &quot;Git commit规范&quot;">​</a></h2><p>message 格式如下</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;BLANK LINE&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;BLANK LINE&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;footer&gt;</span></span></code></pre></div><p>每个提交消息都包含一个subject、一个body和一个footer (中间使用空行分割)，提交信息的任何一行不能超过 100 个字符。<br> 👉 type主要有以下几种类型：</p><ul><li>feat: 一个新特性</li><li>fix: 修复bug</li><li>docs: 文档修改</li><li>style: 不影响代码含义的更改（空格、格式、缺少分号等）</li><li>refactor: 代码重构</li><li>perf: 优化性能</li><li>test: 测试用例修改</li><li>chore: 对构建过程或辅助工具和库的更改，例如文档生成 👉 scope：可以是影响范围的任何内容。</li></ul><p>👉 subject：包含对更改的简洁描述，规则：</p><ul><li>使用陈述语句</li><li>第一个字母不要大写</li><li>末尾没有点 (.)</li></ul><p>👉 body：commit 具体修改内容, 可以分为多行，应该包括改变的动机，并与以前的行为进行对比。</p><p>👉 footer: 一些备注, 通常是修复的 bug 的链接。<br> 👉 <a href="https://github.com/nrwl/nx" target="_blank" rel="noreferrer">示例</a>： <img src="`+p+`" alt="提交示例"></p><p>约束提交：<a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer"><code>commitlint</code></a>。它要做的就是在我们每次提交 <code>git commit</code> 的时候，都会帮我们检查 <code>commit message</code> 是否符合一定的规范，如果不符合，就让这次提交失败。<br> 具体配置：</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># 安装 commitlint cli 和 conventional config</span></span>
<span class="line"><span style="color:#A6ACCD;">npm install --save-dev @commitlint/{config-conventional,cli}</span></span>
<span class="line"><span style="color:#A6ACCD;"># Windows:</span></span>
<span class="line"><span style="color:#A6ACCD;">npm install --save-dev @commitlint/config-conventional @commitlint/cli</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">配置要使用的 commitlint 规则</span></span>
<span class="line"><span style="color:#A6ACCD;">echo &quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot; &gt; commitlint.config.js</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">加入到husky中：</span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky add .husky/commit-msg &#39;npx --no -- commitlint --edit &quot;$1&quot;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">or</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn husky add .husky/commit-msg &#39;yarn commitlint --edit $1&#39;</span></span></code></pre></div><h2 id="资源" tabindex="-1">资源 <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源&quot;">​</a></h2><ol><li><a href="https://ant.design/docs/spec/introduce-cn" target="_blank" rel="noreferrer">Antd设计规范</a></li><li><a href="https://design.teambition.com/doc/introduction" target="_blank" rel="noreferrer">Clarity Design设计规范</a></li></ol><h2 id="推荐阅读" tabindex="-1">推荐阅读 <a class="header-anchor" href="#推荐阅读" aria-label="Permalink to &quot;推荐阅读&quot;">​</a></h2><ol><li><a href="https://juejin.cn/post/7145855619096903717" target="_blank" rel="noreferrer">建立前端构建知识体系</a></li><li><a href="https://juejin.cn/post/7160467329334607908" target="_blank" rel="noreferrer">Webpack Plugin</a></li><li><a href="https://juejin.cn/post/7155151377013047304" target="_blank" rel="noreferrer">前端工程化基石 <code>AST</code>（抽象语法树）以及<code>AST</code>的广泛应用</a></li><li><a href="https://juejin.cn/post/7095396322643017742" target="_blank" rel="noreferrer">自定义hooks</a></li><li><a href="https://juejin.cn/post/6979564690787532814" target="_blank" rel="noreferrer">浅析前端异常及降级处理</a></li><li><a href="https://juejin.cn/post/6981718762483679239" target="_blank" rel="noreferrer">前端重新部署</a></li><li><a href="https://juejin.cn/post/7042332309449605127" target="_blank" rel="noreferrer">前端场景下的搜索框</a></li><li><a href="https://juejin.cn/post/7072761358277672974" target="_blank" rel="noreferrer">React数据持久化机制</a></li><li><a href="https://juejin.cn/post/7076767687828832286" target="_blank" rel="noreferrer">多窗口之间sessionStorage共享状态</a></li></ol><p>来源 <a href="https://github.com/noBaldAaa/my-hooks" target="_blank" rel="noreferrer">Demo</a></p><h2 id="如何使用-eslint" tabindex="-1">如何使用 ESLint <a class="header-anchor" href="#如何使用-eslint" aria-label="Permalink to &quot;如何使用 ESLint&quot;">​</a></h2><ul><li>安装 Node.JS。</li><li>使用 <code>npm install -g eslint</code> 命令（npm 是一个 JavaScript 包安装工具）安装 ESLint。</li><li>在你的 JavaScript 项目的根目录（包含该项目的所有文件的那个文件夹）创建一个名为<code>.eslintrc</code> 的配置文件。</li><li>在集成了 ESLint 的编辑器中安装/启用插件。大多数编辑器都有这个选项。</li></ul><p>剩下的就是根据<a href="https://eslint.org/docs/latest/user-guide/getting-started" target="_blank" rel="noreferrer">官网</a>文档自定义规则集</p><p>或者使用知名的开源规则如</p><ul><li><a href="https://github.com/vuejs/eslint-config-vue" target="_blank" rel="noreferrer">vue 官方</a></li><li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noreferrer">airbnb</a></li></ul><p>安装pnpm和yarn <code>$ npm i pnpm -g --register=&lt;https://registry.npmmirror.com/&gt;</code><code>$ npm install --global yarn</code></p><h2 id="验证-pnpm-是否安装成功" tabindex="-1">验证 pnpm 是否安装成功 <a class="header-anchor" href="#验证-pnpm-是否安装成功" aria-label="Permalink to &quot;验证 pnpm 是否安装成功&quot;">​</a></h2><ul><li><code>$ pnpm -v</code></li><li><code>$ yarn --version</code></li></ul>`,43),i=[r];function y(D,C,d,A,F,u){return n(),a("div",null,i)}const m=s(c,[["render",y]]);export{g as __pageData,m as default};
