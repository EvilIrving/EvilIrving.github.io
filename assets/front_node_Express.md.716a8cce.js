import{_ as e,c as o,o as d,V as c}from"./chunks/framework.0d42427e.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"front/node/Express.md","filePath":"front/node/Express.md","lastUpdated":1691073737000}'),r={name:"front/node/Express.md"},t=c('<h2 id="路由处理方法" tabindex="-1">路由处理方法 <a class="header-anchor" href="#路由处理方法" aria-label="Permalink to &quot;路由处理方法&quot;">​</a></h2><p><strong>Express 应用</strong> 对象还提供了为其它所有 HTTP 动词定义路由处理器的方法，大多数处理器的使用方式完全一致：</p><p><code>checkout()</code>, <code>copy()</code>, <strong><code>delete()</code></strong>, <strong><code>get()</code></strong>, <code>head()</code>, <code>lock()</code>, <code>merge()</code>, <code>mkactivity()</code>, <code>mkcol()</code>, <code>move()</code>, <code>m-search()</code>, <code>notify()</code>, <code>options()</code>, <code>patch()</code>, <strong><code>post()</code></strong>, <code>purge()</code>, <strong><code>put()</code></strong>, <code>report()</code>, <code>search()</code>, <code>subscribe()</code>, <code>trace()</code>, <code>unlock()</code>, <code>unsubscribe()</code>.</p><p>有一个特殊的路由方法 <code>app.all()</code>，它可以在响应任意 HTTP 方法时调用。用于在特定路径上为所有请求方法加载中间件函数。</p><p>路由处理器方法有2个参数：</p><ol><li>路由 <ol><li>字符串</li><li>正则表达式</li></ol></li><li>回调函数</li></ol><p>响应方法如下：</p><ul><li>res.download()</li><li>res.end()</li><li>res.json()</li><li>res.jsonp()</li><li>res.redirect()</li><li>res.render()</li><li>res.send()</li><li>res.sendFile()</li><li>res.sendStatus()</li></ul><h2 id="中间件middleware" tabindex="-1">中间件MiddleWare <a class="header-anchor" href="#中间件middleware" aria-label="Permalink to &quot;中间件MiddleWare&quot;">​</a></h2><p>中间件在 Express 应用中得到了广泛使用，从提供错误处理静态文件、到压缩 HTTP 响应等等。路由函数可以通过向 HTTP 客户端返回一些响应来结束 HTTP “请求 - 响应”周期，而中间件函数<em>通常是</em>对请求或响应执行某些操作，然后调用“栈”里的下一个函数，可能是其它中间件或路由处理器。中间件的调用顺序由应用开发者决定。</p><blockquote><p><strong>注：<strong>中间件可以执行任何操作，运行任何代码，更改请求和响应对象，也可以</strong>结束“请求 - 响应”周期</strong>。如果它没有结束循环，则必须调用 <code>next()</code> 将控制传递给下一个中间件函数（否则请求将成为悬挂请求）。</p></blockquote><p>大多数应用会使用<strong>第三方</strong>中间件来简化常见的 web 开发任务，比如 cookie、会话、用户身份验证、访问请求 <code>POST</code> 和 JSON 数据，日志记录等。</p>',12),s=[t];function l(i,a,n,p,_,h){return d(),o("div",null,s)}const m=e(r,[["render",l]]);export{g as __pageData,m as default};
