import{_ as s,c as a,o as l,V as o}from"./chunks/framework.0d42427e.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"front/basic/01 JavaScript语言基础上.md","filePath":"front/basic/01 JavaScript语言基础上.md","lastUpdated":1691073737000}'),n={name:"front/basic/01 JavaScript语言基础上.md"},e=o(`<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><h3 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/HTML" target="_blank" rel="noreferrer">HTML</a>是一种标记语言</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/CSS" target="_blank" rel="noreferrer">CSS</a> 是一种样式规则语言</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/JavaScript" target="_blank" rel="noreferrer">JavaScript</a> 是一种事件驱动的脚本语言，解释型 （即时解释--编译）、单线程、**服务器端（server-side）**和 **客户端（client-side）**代码；动态类型：变量声明时不需指定变量的类型</li></ul><p>浏览器中嵌入了 JavaScript 引擎，有时也称作“JavaScript 虚拟机”。</p><h3 id="引擎是怎么工作的" tabindex="-1">引擎是怎么工作的 <a class="header-anchor" href="#引擎是怎么工作的" aria-label="Permalink to &quot;引擎是怎么工作的&quot;">​</a></h3><ol><li>引擎（如果是浏览器，则引擎被嵌入在其中）读取（“解析”）脚本。</li><li>然后，引擎将脚本转化（“编译”）为机器语言。</li><li>然后，机器代码快速地执行。</li></ol><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h2><h3 id="变量-常量" tabindex="-1">变量&amp;常量 <a class="header-anchor" href="#变量-常量" aria-label="Permalink to &quot;变量&amp;常量&quot;">​</a></h3><h4 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h4><p>JavaScript 的变量命名有两个限制：</p><ol><li>变量名称必须仅包含字母，数字，符号 <code>$</code> 和 <code>_</code>。</li><li>首字符必须非数字。</li></ol><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords" target="_blank" rel="noreferrer">保留字列表</a></p><h4 id="let-命令" tabindex="-1">let 命令 <a class="header-anchor" href="#let-命令" aria-label="Permalink to &quot;let 命令&quot;">​</a></h4><p>for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p><p>不允许重复声明</p><p>let实际上为 JavaScript 新增了块级作用域。</p><p>块级作用域的出现，实际上使得获得广泛应用的匿名立即执行函数表达式（匿名 IIFE）不再必要了。</p><p>let只能出现在当前作用域的顶层</p><p>ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p><h4 id="块级作用域" tabindex="-1">块级作用域 <a class="header-anchor" href="#块级作用域" aria-label="Permalink to &quot;块级作用域&quot;">​</a></h4><p>第一种场景，内层变量可能会覆盖外层变量。</p><p>第二种场景，用来计数的循环变量泄露为全局变量。</p><p>内层作用域可以定义外层作用域的同名变量。</p><p>const 命令</p><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><p><code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><p>对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的</p><p>对象冻结，应该使用<code>Object.freeze</code>方法。</p><p><code>var</code>、<code>function</code>、<code>let</code>、<code>const</code>、<code>import</code>、<code>class</code>。</p><p>顶层对象的属性：顶层对象，在浏览器环境指的是<code>window</code>对象，在 Node 指的是<code>global</code>对象。ES5 之中，顶层对象的属性与全局变量是等价的。<code>var</code>命令和<code>function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。</p><p>引入<code>globalThis</code>作为顶层对象。也就是说，任何环境下，<code>globalThis</code>都是存在的，都可以从它拿到顶层对象，指向全局环境下的<code>this</code>。</p><h4 id="var-与-let" tabindex="-1">var 与 let <a class="header-anchor" href="#var-与-let" aria-label="Permalink to &quot;var 与 let&quot;">​</a></h4><ol><li><p>初始化一个变量之后用 <code>var</code> 声明它，它仍然可以工作</p></li><li><p>当你使用 <code>var</code> 时，可以根据需要多次声明相同名称的变量，但是 <code>let</code> 不能。let可以重新赋值。</p></li></ol><h3 id="顺序、条件、循环结构" tabindex="-1">顺序、条件、循环结构 <a class="header-anchor" href="#顺序、条件、循环结构" aria-label="Permalink to &quot;顺序、条件、循环结构&quot;">​</a></h3><p>条件分支：<code>if</code> 语句和条件运算符 <code>?</code>（也称为“问号”运算符）来实现。</p><p><code>while</code> 循环的语法如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 代码</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 所谓的“循环体”</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>当 <code>condition</code> 为真时，执行循环体的 <code>code</code>。</p><p>使用 <code>do..while</code> 语法可以将条件检查移至循环体 <strong>下面</strong>：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (condition)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>循环首先执行循环体，然后检查条件，当条件为真时，重复执行循环体。</p><p><code>for</code> 循环看起来就像这样：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (begin</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> condition</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> step) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ……循环体……</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>switch</code> 语句有至少一个 <code>case</code> 代码块和一个可选的 <code>default</code> 代码块。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;">(x) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// if (x === &#39;value1&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">    [break]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// if (x === &#39;value2&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">    [break]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">    [break]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="逻辑运算" tabindex="-1">逻辑运算 <a class="header-anchor" href="#逻辑运算" aria-label="Permalink to &quot;逻辑运算&quot;">​</a></h3><p>或运算寻找第一个真值 与运算寻找第一个假值 与运算 <code>&amp;&amp;</code> 的优先级比或运算 || 要高。</p><h3 id="空值合并运算符" tabindex="-1">空值合并运算符 <code>??</code> <a class="header-anchor" href="#空值合并运算符" aria-label="Permalink to &quot;空值合并运算符 \`??\`&quot;">​</a></h3><p>空值合并运算符（nullish coalescing operator）的写法为两个问号 <code>??</code>。</p><p><code>a ?? b</code> 的结果是：</p><ul><li>如果 <code>a</code> 是已定义的，则结果为 <code>a</code>，</li><li>如果 <code>a</code> 不是已定义的，则结果为 <code>b</code>。</li></ul><p>如果第一个参数不是 <code>null/undefined</code>，则 <code>??</code> 返回第一个参数。否则，返回第二个参数。</p><p>或 <code>||</code> 运算符 和 空值合并运算符 <code>??</code>之间重要的区别是：</p><ul><li><code>||</code> 返回第一个 <strong>真</strong> 值。（<code>||</code> 无法区分 <code>false</code>、<code>0</code>、空字符串 <code>&quot;&quot;</code> 和 <code>null/undefined</code>。）</li><li><code>??</code> 返回第一个 <strong>已定义的</strong> 值。</li></ul><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><ul><li>原始数据类型 <ul><li>Undefined： <code>未被赋值</code>。</li><li>Null：代表“无”、“空”或“值未知”的特殊值。</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol (ES6)</li></ul></li><li>Object</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;undefined&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;number&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;bigint&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;boolean&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;string&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// &quot;symbol&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> Math </span><span style="color:#676E95;font-style:italic;">// &quot;object&quot;  内建对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;object&quot; 遗留问题</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> alert </span><span style="color:#676E95;font-style:italic;">// &quot;function&quot;  其实是对象，特殊对待</span></span></code></pre></div><p>特殊字符：Number特殊数值（“special numeric values”）”：<code>Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code>。</p><p><code>typeof</code> 操作符的唯一目的就是检查数据类型</p><h3 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h3><p>显式转换：Number（mix）和String（mix） parseInt（string，基底）:从数字开始看，看到整数部分； parseFloat（）看到小数位一位， toString（radix）：可以转进制：null undefined不能用，Boolean（）；</p><p>隐式（内部显示）转换：数字 --&gt; 字符串（+ &quot;&quot;），字符串 --&gt; 数值（- <em>/ : -0</em>1 /1）；isNaN（）</p><p>显式转换：undefined null NaN “” 0 FALSE ==&gt; FALSE；任何类型 +字符串都是字符串；</p><ul><li>对 <code>undefined</code> 进行数字型转换时，输出结果为 <code>NaN</code>，而非 <code>0</code>。</li><li>对 <code>&quot;0&quot;</code> 和只有空格的字符串（比如：<code>&quot; &quot;</code>）进行布尔型转换时，输出结果为 <code>true</code>。</li></ul><p><strong>运算符</strong>：算术运算符 赋值运算符 关系运算符 逻辑运算符</p><p>求幂 **； 逻辑符 场景：判断用户用邮箱、手机号等注册登录；判断音乐播放暂停；</p><p>tips : 除数为0，结果是infinite 类型是number</p><ul><li><code>+</code> 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 <code>+</code> 则会将其转化为数字。</li><li><code>+</code>号：数字之间是普通运算，字符串之间拼接，数字与字符串是拼接（隐式转换）</li><li><code>()</code>优先级最高</li><li><code>&amp; |</code>存在短路现象：如果前面是真，才执行后面语句，可用到短路现象</li><li>字符串比较，直接通过字符串的方式进行比较：按照字符串中字符在ASCII码表的位置比较码值，如果码值完全相同，则字符串相同。</li><li>NaN is a Number</li></ul><p>tips：数字 0、空字符串 &quot;&quot;、null、undefined 和 NaN 都会被转换成 false。因为它们被称为“假值（falsy）”值。 其他值被转换为 true，所以它们被称为“真值（truthy）”。</p><p>有三种常用的类型转换：转换为 string 类型、转换为 number 类型和转换为 boolean 类型。</p><p><strong>字符串转换</strong> —— 转换发生在输出内容的时候，也可以通过 <code>String(value)</code> 进行显式转换。原始类型值的 string 类型转换通常是很明显的。</p><p><strong>数字型转换</strong> —— 转换发生在进行算术操作时，也可以通过 <code>Number(value)</code> 进行显式转换。</p><p>数字型转换遵循以下规则：</p><table><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">变成……</th></tr></thead><tbody><tr><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;"><code>NaN</code></td></tr><tr><td style="text-align:left;"><code>null</code></td><td style="text-align:left;"><code>0</code></td></tr><tr><td style="text-align:left;"><code>true / false</code></td><td style="text-align:left;"><code>1 / 0</code></td></tr><tr><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">“按原样读取”字符串，两端的空白会被忽略。空字符串变成 <code>0</code>。转换出错则输出 <code>NaN</code>。</td></tr></tbody></table><p><strong>布尔型转换</strong> —— 转换发生在进行逻辑操作时，也可以通过 <code>Boolean(value)</code> 进行显式转换。</p><p>布尔型转换遵循以下规则：</p><table><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">变成……</th></tr></thead><tbody><tr><td style="text-align:left;"><code>0</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, <code>&quot;&quot;</code></td><td style="text-align:left;"><code>false</code></td></tr><tr><td style="text-align:left;">其他值</td><td style="text-align:left;"><code>true</code></td></tr></tbody></table><p>上述的大多数规则都容易理解和记忆。人们通常会犯错误的值得注意的例子有以下几个：</p><ul><li>对 <code>undefined</code> 进行数字型转换时，输出结果为 <code>NaN</code>，而非 <code>0</code>。</li><li>对 <code>&quot;0&quot;</code> 和只有空格的字符串（比如：<code>&quot; &quot;</code>）进行布尔型转换时，输出结果为 <code>true</code>。</li></ul><h3 id="函数、函数表达式及箭头函数" tabindex="-1">函数、函数表达式及箭头函数 <a class="header-anchor" href="#函数、函数表达式及箭头函数" aria-label="Permalink to &quot;函数、函数表达式及箭头函数&quot;">​</a></h3><h4 id="函数声明" tabindex="-1">函数声明 <a class="header-anchor" href="#函数声明" aria-label="Permalink to &quot;函数声明&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">showMessage</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">( </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello everyone!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="函数表达式" tabindex="-1">函数表达式 <a class="header-anchor" href="#函数表达式" aria-label="Permalink to &quot;函数表达式&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sayHi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">( </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h4 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h4><p><code>let sum = (a, b) =&gt; a + b;</code></p><ol><li>不带花括号：<code>(...args) =&gt; expression</code> — 右侧是一个表达式：函数计算表达式并返回其结果。</li><li>带花括号：<code>(...args) =&gt; { body }</code> — 花括号允许我们在函数中编写多个语句，但是我们需要显式地 <code>return</code> 来返回一些内容。</li></ol><p>区别：<strong>函数表达式是在代码执行到达时被创建，并且仅从那一刻起可用。而</strong> 在函数声明被定义之前，函数生命方式的函数就可以被调用。</p><p><strong>严格模式下，当一个函数声明在一个代码块内时，它在该代码块内的任何位置都是可见的。但在代码块外不可见。</strong></p><h4 id="箭头函数的语法" tabindex="-1">箭头函数的语法 <a class="header-anchor" href="#箭头函数的语法" aria-label="Permalink to &quot;箭头函数的语法&quot;">​</a></h4><p>let func = (arg1, arg2, ...argN) =&gt; expression，函数 <code>func</code>，它接受参数 <code>arg1..argN</code>，然后使用参数对右侧的 <code>expression</code> 求值并返回其结果。若无参保留括号为空即可，若只有一个参数可省略括号，箭头函数对于简单的单行行为（action）来说非常方便。</p><p>其等价于</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">argN</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">expression</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span><span style="color:#676E95;font-style:italic;">//花括号表示开始一个多行函数,单行不要用{}</span></span></code></pre></div><h4 id="箭头函数的局限" tabindex="-1">箭头函数的局限 <a class="header-anchor" href="#箭头函数的局限" aria-label="Permalink to &quot;箭头函数的局限&quot;">​</a></h4><ul><li><p>箭头函数没有 “this”，其访问this时会从外部获取。强行使用this报错undefined。</p></li><li><p>不具有 <code>this</code> 自然也就意味着另一个限制：箭头函数不能用作构造器（constructor）。不能用 <code>new</code> 调用它们。</p></li><li><p>箭头函数也没有 <code>arguments</code> 变量。</p></li><li><p>也没有super。</p><blockquote><p>箭头函数是针对那些没有自己的“上下文”，但在当前上下文中起作用的短代码的。</p></blockquote></li></ul><h3 id="数学运算" tabindex="-1">数学运算 <a class="header-anchor" href="#数学运算" aria-label="Permalink to &quot;数学运算&quot;">​</a></h3><p>支持以下数学运算：</p><ul><li>加法 <code>+</code>,</li><li>减法 <code>-</code>,</li><li>乘法 <code>*</code>,</li><li>除法 <code>/</code>,</li><li>取余 <code>%</code>,</li><li>求幂 <code>**</code>.</li></ul><p>加号 <code>+</code> 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 <code>+</code> 则会将其转化为数字。</p><h3 id="tips" tabindex="-1">tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;tips&quot;">​</a></h3><p>仅仅等于对方而不等于其他任何的值（只在非严格相等下成立）。 null === undefined // false null == undefined // true</p><p>null/undefined 会被转化为数字：null 被转化为 0，undefined 被转化为 NaN。但是：<code>null &gt;= 0 // true</code></p><h2 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>它们存储属性（键值对），其中：</p><ul><li>属性的键必须是字符串或者 symbol（通常是字符串）。</li><li>值可以是任何类型。</li></ul><p>我们可以用下面的方法访问属性：</p><ul><li>点符号: <code>obj.property</code>。</li><li>方括号 <code>obj[&quot;property&quot;]</code>，方括号允许从变量中获取键，例如 <code>obj[varWithKey]</code>。</li></ul><p>其他操作：</p><ul><li>删除属性：<code>delete obj.prop</code>。</li><li>检查是否存在给定键的属性：<code>&quot;key&quot; in obj</code>。</li><li>遍历对象：<code>for(let key in obj)</code> 循环。</li></ul><h3 id="对象引用和赋值" tabindex="-1">对象引用和赋值 <a class="header-anchor" href="#对象引用和赋值" aria-label="Permalink to &quot;对象引用和赋值&quot;">​</a></h3><p><strong>赋值了对象的变量存储的不是对象本身，而是该对象“在内存中的地址”，换句话说就是对该对象的“引用”。当一个对象变量被复制 —— 引用则被复制，而该对象并没有被复制。</strong></p><p><code>Object.assign(dest, [src1, src2, src3...])</code> 第一个参数 <code>dest</code> 是指目标对象。 更后面的参数 <code>src1, ..., srcN</code>（可按需传递多个参数）是源对象。 该方法将所有源对象的属性拷贝到目标对象 <code>dest</code> 中。换句话说，从第二个开始的所有参数的属性都被拷贝到第一个参数的对象中。 调用结果返回 <code>dest</code>。</p><h3 id="遍历对象" tabindex="-1">遍历对象 <a class="header-anchor" href="#遍历对象" aria-label="Permalink to &quot;遍历对象&quot;">​</a></h3><p>三种原生的方法用于列出或枚举对象的属性：</p><ul><li>for...in 循环 该方法依次访问一个对象及其原型链中所有可枚举的属性。</li><li>Object.keys(o) 该方法返回对象 o 自身包含（不包括原型中）的所有可枚举属性的名称的数组。</li><li>Object.getOwnPropertyNames(o) 该方法返回对象 o 自身包含（不包括原型中）的所有属性(无论是否可枚举)的名称的数组。</li></ul><h3 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h3><p>固有的可达值的基本集合，这些值明显不能被释放。</p><ul><li>当前函数的局部变量和参数。</li><li>嵌套调用时，当前调用链上所有函数的变量与参数。</li><li>全局变量。</li><li>（还有一些内部的）</li></ul><p>这些值被称作 <strong>根（roots）</strong>。</p><p>如果一个值可以通过引用或引用链从根访问任何其他值，则认为该值是可达的。比方说，如果全局变量中有一个对象，并且该对象有一个属性引用了另一个对象，则 <strong>该</strong> 对象被认为是可达的。而且它引用的内容也是可达的。</p><p>垃圾回收的基本算法被称为 “mark-and-sweep”。</p><p>定期执行以下“垃圾回收”步骤：</p><ul><li>垃圾收集器找到所有的根，并“标记”（记住）它们。</li><li>然后它遍历并“标记”来自它们的所有引用。</li><li>然后它遍历标记的对象并标记 <strong>它们的</strong> 引用。所有被遍历到的对象都会被记住，以免将来再次遍历到同一个对象。</li><li>……如此操作，直到所有可达的（从根部）引用都被访问到。</li><li>没有被标记的对象都会被删除。</li></ul><p>一些优化建议：</p><ul><li><strong>分代收集（Generational collection）</strong>—— 对象被分成两组：“新的”和“旧的”。许多对象出现，完成它们的工作并很快死去，它们可以很快被清理。那些长期存活的对象会变得“老旧”，而且被检查的频次也会减少。</li><li><strong>增量收集（Incremental collection）</strong>—— 如果有许多对象，并且我们试图一次遍历并标记整个对象集，则可能需要一些时间，并在执行过程中带来明显的延迟。所以引擎试图将垃圾收集工作分成几部分来做。然后将这几部分会逐一进行处理。这需要它们之间有额外的标记来追踪变化，但是这样会有许多微小的延迟而不是一个大的延迟。</li><li><strong>闲时收集（Idle-time collection）</strong>—— 垃圾收集器只会在 CPU 空闲时尝试运行，以减少可能对代码执行的影响。</li></ul><h3 id="构造器-函数-和-new" tabindex="-1">构造器（函数）和 new <a class="header-anchor" href="#构造器-函数-和-new" aria-label="Permalink to &quot;构造器（函数）和 new&quot;">​</a></h3><p>构造函数在技术上是常规函数。不过有两个约定：</p><ol><li>它们的命名以大写字母开头。</li><li>它们只能由 <code>&quot;new&quot;</code> 操作符来执行。</li></ol><p>当一个函数被使用 <code>new</code> 操作符执行时，它按照以下步骤：</p><ol><li>一个新的空对象被创建并分配给 <code>this</code>。this = {}</li><li>函数体执行。通常它会修改 <code>this</code>，为其添加新的属性。</li><li>返回 <code>this</code> 的值。return this</li></ol><p>另一种说法：</p><ol><li>创建了一个空对象 var object = {}</li><li>设置原型链（将空对象的<code>__proto__</code>设置为该构造函数的原型对象）<code>object.__proto__ = Func.prototype</code></li><li>调用Func函数，内部this重定向为这个空对象，并赋值Func.call(obj);</li><li>返回创建好的对象，return object</li></ol><p>构造器的主要目的 —— 实现可重用的对象创建代码。</p><p>构造器模式测试：new.target</p><p>用在函数内部，来判断该函数是被通过 <code>new</code> 调用的“构造器模式”，还是没被通过 <code>new</code> 调用的“常规模式”。</p><h3 id="可选链" tabindex="-1">可选链 ? <a class="header-anchor" href="#可选链" aria-label="Permalink to &quot;可选链 ?&quot;">​</a></h3><p>可选链 <code>?.</code> 语法有三种形式：</p><ol><li><code>obj?.prop</code> —— 如果 <code>obj</code> 存在则返回 <code>obj.prop</code>，否则返回 <code>undefined</code>。</li><li><code>obj?.[prop]</code> —— 如果 <code>obj</code> 存在则返回 <code>obj[prop]</code>，否则返回 <code>undefined</code>。</li><li><code>obj.method?.()</code> —— 如果 <code>obj.method</code> 存在则调用 <code>obj.method()</code>，否则返回 <code>undefined</code>。</li></ol><p>正如我们所看到的，这些语法形式用起来都很简单直接。<code>?.</code> 检查左边部分是否为 <code>null/undefined</code>，如果不是则继续运算。</p><p><code>?.</code> 链使我们能够安全地访问嵌套属性。</p><h3 id="symbol-类型" tabindex="-1">Symbol 类型 <a class="header-anchor" href="#symbol-类型" aria-label="Permalink to &quot;Symbol 类型&quot;">​</a></h3><p><code>Symbol</code> 是唯一标识符的基本类型</p><p>Symbol 是使用带有可选描述（name）的 <code>Symbol()</code> 调用创建的。</p><p>Symbol 总是不同的值，即使它们有相同的名字。如果我们希望同名的 Symbol 相等，那么我们应该使用全局注册表：<code>Symbol.for(key)</code> 返回（如果需要的话则创建）一个以 <code>key</code> 作为名字的全局 Symbol。使用 <code>Symbol.for</code> 多次调用 <code>key</code> 相同的 Symbol 时，返回的就是同一个 Symbol。</p><p>Symbol 有两个主要的使用场景：</p><ol><li>Symbol 允许我们创建对象的“隐藏”属性，代码的任何其他部分都不能意外访问或重写这些属性。</li><li>全局Symbol 从注册表中读取（不存在则创建）Symbol，请使用 <code>Symbol.for(key)</code>。该调用会检查全局注册表，如果有一个描述为 <code>key</code> 的 Symbol，则返回该 Symbol，否则将创建一个新 Symbol（<code>Symbol(key)</code>），并通过给定的 <code>key</code> 将其存储在注册表中。</li></ol><p>JavaScript 中的大多数值都支持字符串的隐式转换。例如，我们可以 <code>alert</code> 任何值，都可以生效。Symbol 比较特殊，它不会被自动转换。</p><p>如果我们要在对象字面量 <code>{...}</code> 中使用 Symbol，则需要使用方括号把它括起来。</p><p>反向调用：<code>Symbol.keyFor(sym)</code>，它的作用完全反过来：通过全局 Symbol 返回一个名字。<code>Symbol.keyFor</code> 内部使用全局 Symbol 注册表来查找 Symbol 的键。</p><h3 id="对象-—-原始值转换" tabindex="-1">对象 — 原始值转换 <a class="header-anchor" href="#对象-—-原始值转换" aria-label="Permalink to &quot;对象 — 原始值转换&quot;">​</a></h3><p><strong>为了进行转换，JavaScript 尝试查找并调用三个对象方法：</strong></p><ol><li>调用 <code>obj[Symbol.toPrimitive](hint)</code> —— 带有 symbol 键 <code>Symbol.toPrimitive</code>（系统 symbol）的方法，如果这个方法存在的话，</li><li>否则，如果 hint 是 <code>&quot;string&quot;</code> —— 尝试 <code>obj.toString()</code> 和 <code>obj.valueOf()</code>，无论哪个存在。</li><li>否则，如果 hint 是 <code>&quot;number&quot;</code> 或 <code>&quot;default&quot;</code> —— 尝试 <code>obj.valueOf()</code> 和 <code>obj.toString()</code>，无论哪个存在。</li></ol><p>普通对象具有 <code>toString</code> 和 <code>valueOf</code> 方法：</p><ul><li><code>toString</code> 方法返回一个字符串 <code>&quot;[object Object]&quot;</code>。</li><li><code>valueOf</code> 方法返回对象自身。</li></ul><h3 id="如何创建对象" tabindex="-1">如何创建对象 <a class="header-anchor" href="#如何创建对象" aria-label="Permalink to &quot;如何创建对象&quot;">​</a></h3><ol><li>根据语法 声明对象</li><li>构造函数 创建（new）对象</li><li>Object（）构造函数：创建(new)空对象，使用点括号法、用{}传递对象文本到object（）小括号里作为参数加属性和方法</li><li>Object.create（object）方法：基于现有对象创建新的对象；new.<strong>proto</strong>=old;</li><li>let user = new Object(); // “构造函数” 的语法</li><li>let user = {}; // “字面量” 的语法</li></ol><h3 id="操作对象" tabindex="-1">操作对象 <a class="header-anchor" href="#操作对象" aria-label="Permalink to &quot;操作对象&quot;">​</a></h3><p>delete删除对象属性</p><p>点语法访问单个属性 方括号添加或访问多个属性</p><p><code>in</code> 的左边必须是 <strong>属性名</strong>。通常是一个带引号的字符串。省略引号，就意味着左边是一个变量，它应该包含要判断的实际属性名。</p><p>tips：</p><p>属性命名没有限制。属性名可以是任何字符串或者 symbol</p><p>键值如其他类型会被自动地转换为字符串。</p><p>“有特别的顺序”：整数属性会被进行排序，其他属性则按照创建的顺序显示</p><h3 id="对象的内容" tabindex="-1">对象的内容 <a class="header-anchor" href="#对象的内容" aria-label="Permalink to &quot;对象的内容&quot;">​</a></h3><ol><li><p>一个对象由许多的成员组成，每一个成员都拥有一个名字（像上面的name、age），和一个值（如[&#39;Bob&#39;, &#39;Smith&#39;]、32）。每一个名字/值（name/value）对被逗号分隔开，并且名字和值之间由冒号（:）分隔。</p></li><li><p>关键概念：dot notation 子命名空间 括号表示法 多态 构建函数 关联数组 object package namespace 封装 data stores <strong>原型（prototype）、原型链 prototype chain、构造函数、create（）、原型对象__proto__、构造器、原型式继承</strong></p></li><li><p><strong>prototype-based language：<strong>每个对象拥有一个</strong>原型对象</strong>，对象以其原型为模板、从原型继承方法和属性。</p></li><li><p>每个实例对象都从原型中继承了一个constructor属性，该属性指向了用于构造此实例对象的构造函数。</p></li><li><p>修改原型：极其常见的对象定义模式是，在构造器（函数体）中定义属性、在 <code>prototype</code> 属性上定义方法。</p></li></ol><h3 id="oop-oojs" tabindex="-1">OOP OOJS <a class="header-anchor" href="#oop-oojs" aria-label="Permalink to &quot;OOP OOJS&quot;">​</a></h3><p><strong>注意</strong>：原型链中的方法和属性<strong>没有</strong>被复制到其他对象——它们被访问需要通过前面所说的“原型链”的方式。</p><p>tips：<code>this</code> 关键字不指向当前对象的原型对象</p><h2 id="数据类型-1" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型-1" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="数字类型" tabindex="-1">数字类型 <a class="header-anchor" href="#数字类型" aria-label="Permalink to &quot;数字类型&quot;">​</a></h3><h4 id="转进制" tabindex="-1">转进制 <a class="header-anchor" href="#转进制" aria-label="Permalink to &quot;转进制&quot;">​</a></h4><p>方法 <code>num.toString(base)</code> 返回在给定 <code>base</code> 进制数字系统中 <code>num</code> 的字符串表示形式。<code>base</code> 的范围可以从 <code>2</code> 到 <code>36</code>。默认情况下是 <code>10</code>。</p><ul><li><strong>base=16</strong> 用于十六进制颜色，字符编码等，数字可以是 <code>0..9</code> 或 <code>A..F</code>。</li><li><strong>base=2</strong> 主要用于调试按位操作，数字可以是 <code>0</code> 或 <code>1</code>。</li><li><strong>base=36</strong> 是最大进制，数字可以是 <code>0..9</code> 或 <code>A..Z</code>。所有拉丁字母都被用于了表示数字。短链接就是这么来的</li></ul><p>数字直接使用需要两个点 <code>123456..toString(36)</code></p><h4 id="math常用方法" tabindex="-1">Math常用方法 <a class="header-anchor" href="#math常用方法" aria-label="Permalink to &quot;Math常用方法&quot;">​</a></h4><p>弧度除以 <code>(Math.PI / 180)</code> 即可转换为角度，同理，角度乘以这个数则能转换为弧度。</p><ol><li>Math.PI 圆周率，一个圆的周长和直径之比，约等于 3.14159。</li><li>Math.SQRT1_2 二分之一 ½ 的平方根，同时也是 2 的平方根的倒数 12，约等于 0.707。</li><li>Math.SQRT2 2 的平方根，约等于 1.414。</li><li>Math.abs(x) 返回一个数的绝对值。</li><li>Math.max([x[, y[, …]]]) 返回零到多个数值中最大值。</li><li>Math.min([x[, y[, …]]]) 返回零到多个数值中最小值。</li><li>Math.pow(x, y) 返回一个数的 y 次幂。</li><li>Math.random() 返回一个 0 到 1 之间的伪随机数。</li><li>Math.round(x) 返回四舍五入后的整数。</li><li>Math.sign(x) 返回一个数的符号，得知一个数是正数、负数还是 0。</li><li>Math.sqrt(x) 返回一个数的平方根。</li><li>Math.trunc(x) 返回一个数的整数部分，直接去除其小数点及之后的部分。</li></ol><h4 id="随机数" tabindex="-1">随机数 <a class="header-anchor" href="#随机数" aria-label="Permalink to &quot;随机数&quot;">​</a></h4><ol><li>[min, max) 随机数 Math.random() * (max - min) + min;</li><li>[min, max) 随机整数</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getRandomInt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">min</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">max</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">min</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ceil</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">min</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//向上取整</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">max</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">max</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//向下取整</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">max</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">min</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">min</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//不含最大值，含最小值</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><ol><li>[min, max] 随机整数</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getRandomIntInclusive</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">min</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">max</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">min</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ceil</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">min</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">max</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">max</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">max</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">min</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">min</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//含最大值，含最小值 </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash" target="_blank" rel="noreferrer"><strong>猜数字游戏</strong></a></p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Math.floor(Math.random() * 100) + 1;随机数代码</span></span></code></pre></div><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><h4 id="特殊字符" tabindex="-1">特殊字符 <a class="header-anchor" href="#特殊字符" aria-label="Permalink to &quot;特殊字符&quot;">​</a></h4><p>转义字符：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String#parameters" target="_blank" rel="noreferrer">点击链接</a></p><h4 id="常用方法" tabindex="-1">常用方法 <a class="header-anchor" href="#常用方法" aria-label="Permalink to &quot;常用方法&quot;">​</a></h4><ol><li><p><code>charAt()</code>返回特定位置的字符</p></li><li><p><code>includes()</code>判断一个字符串里是否包含其他字符串。</p></li><li><p><code>endsWith()</code>判断一个字符串的是否以给定字符串结尾，结果返回布尔值。</p></li><li><p><code>trim()</code> 方法会从一个字符串的两端删除空白字符。</p></li><li><p><code>indexOf()</code>从字符串对象中返回首个被发现的给定值的索引值，如果没有找到则返回-1。</p></li><li><p><code>lastIndexOf()</code>从字符串对象中返回最后一个被发现的给定值的索引值，如果没有找到则返回-1。</p></li><li><p><code>slice(beginIndex，endIndex)</code>：如果值为负数，会被当做 strLength + beginIndex 看待，这里的strLength 是字符串的长度</p></li><li><p><code>toLowerCase():</code>转小写</p></li><li><p><code>toUpperCase():</code>转大写</p></li><li><p><code>replace()</code>被用来在正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。</p></li><li><p><code>match()</code>使用正则表达式与字符串相比较。</p></li><li><p><code>repeat()</code> 返回指定重复次数的由元素组成的字符串对象。</p></li><li><p><code>substr()</code> 通过指定字符数返回在指定位置开始的字符串中的字符。</p></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(browserType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mozilla</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>在主字符串中找不到子字符串（在本例中为“vanilla”）时将返回 -1。如上：</p></blockquote><h4 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h4><p>使用反引号 () 来代替普通字符串中的双引号和单引号；模板字符串可以包含特定语法<code>（\${expression}）</code>的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来。</p><p>使用技巧：多行字符串 插入表达式 嵌套模板 带标签的模板字符串</p><link rel="stylesheet" type="text/css" href="media.css" media="screen and (max-width: 800px)"><h3 id="数组方法" tabindex="-1">数组方法 <a class="header-anchor" href="#数组方法" aria-label="Permalink to &quot;数组方法&quot;">​</a></h3><ol><li><code>push()</code> <code>unshift()</code>给数组增加元素，可以同时增加多个值，同时返回新数组长度,<code>pop()</code> <code>shift()</code>给数组删除元素，一次删除一个，同时返回删掉的元素值。</li><li><code>arr.splice(start[, deleteCount, elem1, ..., elemN])</code> 它从索引 start 开始修改 arr：删除 deleteCount 个元素并在当前位置插入 elem1, ..., elemN。最后返回已被删除元素的数组。允许负向索引，从数组末尾计算位置</li><li><code>arr.slice([start], [end])</code> 返回一个新数组，将所有从索引 start 到 end（不包括 end）的数组项复制到一个新的数组。start 和 end 都可以是负数，在这种情况下，从末尾计算索引。</li><li><code>arr.forEach(function(item, index, array)</code> { // ... do something with item });方法允许为数组的每个元素都运行一个函数。该函数的结果（如果它有返回）会被抛弃和忽略。</li><li><code>arr.indexOf(item, from)</code> 从索引 from 开始搜索 item，如果找到则返回索引，否则返回 -1。</li><li><code>arr.lastIndexOf(item, from)</code> —— 和上面相同，只是从右向左搜索。</li><li><code>arr.includes(item, from)</code> —— 从索引 from 开始搜索 item，如果找到则返回 true（以上三个方法都是执行严格相等 ===，但是includes可识别NaN）</li><li>let result = <code>arr.find</code>(function(item, index, array) { // 如果返回 true，则返回 item 并停止迭代 // 对于假值（falsy）的情况，则返回 undefined }); <code>arr.findIndex</code> 类似，返回的是索引。找不到返回 -1；</li><li>let results = <code>arr.filter</code>(function(item, index, array) {<br> // 如果 true item 被 push 到 results，迭代继续<br> // 如果什么都没找到，则返回空数组 });</li><li>let result = <code>arr.map</code>(function(item, index, array) { // 返回新值而不是当前元素 })</li><li><code>arr.sort(fn)</code> 方法对数组进行 原位（in-place） 排序，更改元素的顺序。(译注：原位是指在此数组内，而非生成一个新数组。)默认是按照字符串进行排序的。arr.sort( (a, b) =&gt; a - b );</li><li><code>arr.reverse</code> 方法用于颠倒 arr 中元素的顺序。</li><li><code>str.split([separator[, limit]])</code>通过给定的分隔符 separator将字符串分割成一个数组 <strong>本是字符串方法，数组也可以用</strong></li><li><code>arr.join(glue)</code> 与 split 相反。它会在它们之间创建一串由 glue 粘合的 arr 项。即转字符串方法</li><li>let value = <code>arr.reduce</code>(function(accumulator, item, index, array) { // ... }, [initial]); 该函数一个接一个地应用于所有数组元素，并将其结果“搬运（carry on）”到下一个调用。 accumulator —— 是上一个函数调用的结果，第一次等于 initial（如果提供了 initial 的话）。 item —— 当前的数组元素。 index —— 当前索引。 arr —— 数组本身。</li><li><code>Array.prototype.entries()</code>返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。</li><li><code>Array.prototype.every()</code> 如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。</li><li><code>Array.prototype.some()</code> 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。</li></ol><blockquote><ol><li>数组下标越界时，得到<code>undefined</code></li><li>逗号之间没有值，系统会算入数组个数里，但是其值为undefined；如果最后一个逗号后面没有值，系统则会忽略，不算入个数： var arr4 = [1, 2, , 4, ];</li></ol></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Arrays#%E7%A7%AF%E6%9E%81%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%89%8D5%E4%B8%AA%E6%90%9C%E7%B4%A2" title="Permalink to 积极学习：前5个搜索" target="_blank" rel="noreferrer">前5个搜索</a></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.output ul</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> searchInput </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.output input</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> searchBtn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.output button</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myHistory</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  searchBtn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">searchInput</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">myHistory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unshift</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">searchInput</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myHistory</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">itemText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myHistory</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">listItem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">li</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">listItem</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">itemText</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">listItem</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">myHistory</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">myHistory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">searchInput</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">searchInput</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">focus</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="iterable-object" tabindex="-1">Iterable object <a class="header-anchor" href="#iterable-object" aria-label="Permalink to &quot;Iterable object&quot;">​</a></h3><h3 id="map-set" tabindex="-1">Map &amp; Set <a class="header-anchor" href="#map-set" aria-label="Permalink to &quot;Map &amp; Set&quot;">​</a></h3><h4 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h4><p>Map 是一个带键的数据项的集合，就像一个 Object 一样。 但是它们最大的差别是 Map 允许任何类型的键（key）。它的方法和属性如下：</p><ul><li>new Map([iterable])—— 创建 map，可选择带有 <code>[key,value]</code> 对的 <code>iterable</code>（例如数组）来进行初始化。</li><li>map.set(key, value) —— 根据键存储值。</li><li>map.get(key) —— 根据键来返回值，如果 map 中不存在对应的 key，则返回 undefined。</li><li>map.has(key) —— 如果 key 存在则返回 true，否则返回 false。</li><li>map.delete(key) —— 删除指定键的值。</li><li>map.clear() —— 清空 map。</li><li>map.size —— 返回当前元素个数。</li></ul><p>与普通对象 <code>Object</code> 的不同点：</p><ul><li>任何键、对象都可以作为键。</li><li>有其他的便捷方法，如 <code>size</code> 属性。</li></ul><h4 id="map迭代-iteration" tabindex="-1">Map迭代（iteration） <a class="header-anchor" href="#map迭代-iteration" aria-label="Permalink to &quot;Map迭代（iteration）&quot;">​</a></h4><p>map.keys() —— 遍历并返回所有的键 map.values() —— 遍历并返回所有的值 map.entries() —— 遍历并返回所有的实体[key, value]，for..of 在默认情况下使用的就是这个。</p><p>tips：迭代的顺序与插入值的顺序相同。与普通的 <code>Object</code> 不同，<code>Map</code> 保留了此顺序。map的系统遍历方法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 对每个键值对 (key, value) 运行 forEach 函数</span></span>
<span class="line"><span style="color:#A6ACCD;">recipeMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">( </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">map</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// cucumber: 500 etc</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><strong>Object.entries:当创建一个 <code>Map</code> 后，我们可以传入一个带有键值对的数组（或其它可迭代对象）来进行初始化</strong></p><blockquote><p><code>Object.entries</code> 返回键/值对数组</p><p><em>let map = new Map(Object.entries(obj));</em></p></blockquote><p><strong>Object.fromEntries:给定一个具有 <code>[key, value]</code> 键值对的数组，它会根据给定数组创建一个对象</strong></p><blockquote><p><code>Object.fromEntries</code> 从 <code>Map</code> 得到一个普通对象（plain object）</p><p><em>let obj = Object.fromEntries(map.entries()); // 创建一个普通对象（plain object）</em></p></blockquote><h4 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h4><p>Set 是一个特殊的类型集合 —— “值的集合”（没有键），它的每一个值只能出现一次。它的主要方法如下：</p><ul><li>new Set(iterable) —— 创建一个 set，如果提供了一个 iterable 对象（通常是数组），将会从数组里面复制值到 set 中。</li><li>set.add(value) —— 添加一个值，返回 set 本身</li><li>set.delete(value) —— 删除值，如果 value 在这个方法调用的时候存在则返回 true ，否则返回 false。</li><li>set.has(value) —— 如果 value 在 set 中，返回 true，否则返回 false。</li><li>set.clear() —— 清空 set。</li><li>set.size —— 返回元素个数。</li></ul><p>它的主要特点是，重复使用同一个值调用 set.add(value) 并不会发生什么改变。这就是 Set 里面的每一个值只出现一次的原因。</p><h4 id="set-迭代-iteration" tabindex="-1">Set 迭代（iteration） <a class="header-anchor" href="#set-迭代-iteration" aria-label="Permalink to &quot;Set 迭代（iteration）&quot;">​</a></h4><p>set.keys() / set.values() —— 遍历并返回所有的值 set.entries() —— 遍历并返回所有的实体[value, value]，它的存在也是为了兼容 Map。</p><p><strong>tips</strong>：在 <code>Map</code> 和 <code>Set</code> 中迭代总是按照值插入的顺序进行的，所以我们不能说这些集合是无序的，但是我们不能对元素进行重新排序，也不能直接按其编号来获取元素。</p><h3 id="对象转换" tabindex="-1">对象转换 <a class="header-anchor" href="#对象转换" aria-label="Permalink to &quot;对象转换&quot;">​</a></h3><h4 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h4><ul><li>Object.keys(obj) —— 返回一个包含该对象所有的键的数组。</li><li>Object.values(obj) —— 返回一个包含该对象所有的值的数组。</li><li>Object.entries(obj) —— 返回一个包含该对象所有 [key, value] 键值对的数组。</li></ul><h4 id="应用数组方法到对象" tabindex="-1">应用数组方法到对象 <a class="header-anchor" href="#应用数组方法到对象" aria-label="Permalink to &quot;应用数组方法到对象&quot;">​</a></h4><ol><li>使用 <code>Object.entries(obj)</code> 从 <code>obj</code> 获取由键/值对组成的数组。</li><li>对该数组使用数组方法，例如 <code>map</code>。</li><li>对结果数组使用 <code>Object.fromEntries(array)</code> 方法，将结果转回成对象。</li></ol><h3 id="解构" tabindex="-1">解构 <a class="header-anchor" href="#解构" aria-label="Permalink to &quot;解构&quot;">​</a></h3><h3 id="日期和时间" tabindex="-1">日期和时间 <a class="header-anchor" href="#日期和时间" aria-label="Permalink to &quot;日期和时间&quot;">​</a></h3><h4 id="概念-时间戳-gettime" tabindex="-1">概念：时间戳 getTime() <a class="header-anchor" href="#概念-时间戳-gettime" aria-label="Permalink to &quot;概念：时间戳 getTime()&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> dateObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">(year</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> month</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> date</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hours</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> minutes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> seconds</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ms)</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">dateObj)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 以毫秒为单位的数值，与使用 date.getTime() 的结果相同</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dateObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFullYear</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//年份</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dateObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMonth</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//获取月份 取值范围 0-11</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dateObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDay</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//获取周几，周日到周六 0-6</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dateObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDate</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//1-31</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dateObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getHours</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//0-23</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dateObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMinutes</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//0-59</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dateObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSeconds</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//0-59</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(dateObj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//从1970.1.1日返回的毫秒数，时间戳</span></span></code></pre></div><p><strong>相应的年月日时分秒 时间戳等有一个set方法；</strong></p><p>tips：当 <code>Date</code> 对象被转化为数字时，得到的是对应的时间戳</p><h2 id="函数进阶" tabindex="-1">函数进阶 <a class="header-anchor" href="#函数进阶" aria-label="Permalink to &quot;函数进阶&quot;">​</a></h2><h3 id="rest参数和spread语法" tabindex="-1">Rest参数和Spread语法 <a class="header-anchor" href="#rest参数和spread语法" aria-label="Permalink to &quot;Rest参数和Spread语法&quot;">​</a></h3><p>Spread 语法内部使用了迭代器来收集元素，与 <code>for..of</code> 的方式相同。</p><p>当我们在代码中看到 <code>&quot;...&quot;</code> 时，它要么是 rest 参数，要么就是 spread 语法。</p><p>有一个简单的方法可以区分它们：</p><ul><li>若 <code>...</code> 出现在函数参数列表的最后，那么它就是 rest 参数，它会把参数列表中剩余的参数收集到一个数组中。</li><li>若 <code>...</code> 出现在函数调用或类似的表达式中，那它就是 spread 语法，它会把一个数组展开为列表。</li></ul><p>使用场景：</p><ul><li>Rest 参数用于创建可接受任意数量参数的函数。</li><li>Spread 语法用于将数组传递给通常需要含有许多参数的列表的函数。</li></ul><p>它们俩的出现帮助我们轻松地在列表和参数数组之间来回转换。</p><p>“旧式”的 <code>arguments</code>（类数组且可迭代的对象）也依然能够帮助我们获取函数调用中的所有参数。</p><h3 id="函数对象-nfe" tabindex="-1">函数对象，NFE <a class="header-anchor" href="#函数对象-nfe" aria-label="Permalink to &quot;函数对象，NFE&quot;">​</a></h3><p>函数就是对象：</p><ul><li><code>name</code> —— 函数的名字。通常取自函数定义，但如果函数定义时没设定函数名，JavaScript 会尝试通过函数的上下文猜一个函数名（例如把赋值的变量名取为函数名）。</li><li><code>length</code> —— 函数定义时的入参的个数。Rest 参数不参与计数。</li></ul><p>如果函数是通过函数表达式的形式被声明的（不是在主代码流里），并且附带了名字，那么它被称为命名函数表达式（Named Function Expression）。这个名字可以用于在该函数内部进行自调用，例如递归调用等。</p><p>此外，函数可以带有额外的属性。很多知名的 JavaScript 库都充分利用了这个功能。</p><h3 id="new-function" tabindex="-1">new Function <a class="header-anchor" href="#new-function" aria-label="Permalink to &quot;new Function&quot;">​</a></h3><p>创建函数的语法</p><p>let func = new Function ([arg1, arg2, ...argN], functionBody);</p><p>该函数是通过使用参数 <code>arg1...argN</code> 和给定的 <code>functionBody</code> 创建的。</p><h3 id="装饰器模式和转发-call-apply" tabindex="-1">装饰器模式和转发，call/apply <a class="header-anchor" href="#装饰器模式和转发-call-apply" aria-label="Permalink to &quot;装饰器模式和转发，call/apply&quot;">​</a></h3><p><strong>装饰器（decorator）</strong>：一个特殊的函数，它接受另一个函数并改变它的行为。</p><p>JavaScript 在处理函数时提供了非凡的灵活性。它们可以被传递，用作对象，现在我们将看到如何在它们之间 转发（forward） 调用并 装饰（decorate） 它们。</p><p><strong>装饰器（decorator）</strong>：一个特殊的函数，它接受另一个函数并改变它的行为。</p><p>使用分离的装饰器函数而不改变另一个函数代码的好处:</p><ul><li><code>cachingDecorator</code> 是可重用的。我们可以将它应用于另一个函数。</li><li>缓存逻辑是独立的，它没有增加 <code>slow</code> 本身的复杂性（如果有的话）。</li><li>如果需要，我们可以组合多个装饰器（其他装饰器将遵循同样的逻辑）。</li></ul><p>但缓存装饰器不适用于对象方法。</p><p>func.call(context, arg1, arg2, ...) func.call(修改成的this对象，实参列表...);</p><blockquote><p>修改this指向后，立即调用该函数。Spread 语法 ... 允许将 可迭代对象 args 作为列表传递给 call。</p></blockquote><p>apply(): func.apply(修改成的this对象，实参列表数组...);</p><blockquote><p>实参写在一个数组里面，apply 仅接受 类数组对象 args。</p></blockquote><p>bind(): func.bind(修改成的this对象，实参列表...);返回值是修改后的新函数，需自行调用</p><ul><li>谁</li><li>this 关键字：判断其指代哪个元素，通过this所在函数，以及触发this效果的是谁，即指代谁。</li><li>arguments[].callee = 函数的引用 （立即执行函数的自身调用）</li><li>关键字&quot;this&quot;指向了当前代码运行时的对象</li></ul><p>链式调用：每次调用后返回这个对象本身（return this）。</p><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><p>原型：在 JavaScript 中，对象有一个特殊的隐藏属性 [[Prototype]]（如规范中所命名的），它要么为 null，要么就是对另一个对象的引用。该对象被称为“原型”</p><p>原型继承：当我们从 object 中读取一个缺失的属性时，JavaScript 会自动从原型中获取该属性。在编程中，这种行为被称为“原型继承”</p><p>设置原型：<strong>proto</strong></p><p>查找：（自下而上）</p><p>无论在哪里找到方法：在一个对象还是在原型中。在一个方法调用中，this 始终是点符号 . 前面的对象。</p><h3 id="两个限制" tabindex="-1">两个限制 <a class="header-anchor" href="#两个限制" aria-label="Permalink to &quot;两个限制&quot;">​</a></h3><p>引用不能形成闭环。如果我们试图在一个闭环中分配<code>__proto__</code>，JavaScript 会抛出错误。 <code>__proto__</code> 的值可以是对象，也可以是 null。而其他的类型都会被忽略。</p><p>只能有一个 <code>[[Prototype]]</code>。一个对象不能从其他两个对象获得继承。</p><p><code>__proto__</code> <strong>是</strong> <code>[[Prototype]]</code> <strong>的因历史原因而留下来的 getter/setter</strong>：Object.getPrototypeOf/Object.setPrototypeOf</p><p>原型仅用于读取属性。对于写入/删除操作可以直接在对象上进行。</p><p>默认的 <code>&quot;prototype&quot;</code> 是一个只有属性 <code>constructor</code> 的对象，属性 <code>constructor</code> 指向函数自身。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Rabbit</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* default prototype</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">Rabbit.prototype = { constructor: Rabbit };</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><h3 id="原型继承" tabindex="-1">原型继承 <a class="header-anchor" href="#原型继承" aria-label="Permalink to &quot;原型继承&quot;">​</a></h3><p>当我们从 <code>object</code> 中读取一个缺失的属性时，JavaScript 会自动从原型中获取该属性。在编程中，这种行为被称为“原型继承”。</p><p>object [[prototype]] --&gt; prototype object</p><p>设置原型</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> animal</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 设置 rabbit.[[Prototype]] = animal</span></span></code></pre></div><p>原型引用限制</p><ol><li>引用不能形成闭环。如果我们试图在一个闭环中分配 <code>__proto__</code>，JavaScript 会抛出错误。</li><li><code>__proto__</code> 的值可以是对象，也可以是 <code>null</code>。而其他的类型都会被忽略。</li></ol><p><code>__proto__</code> 是 <code>[[Prototype]]</code> 的 getter/setter(Object.getPrototypeOf/Object.setPrototypeOf)</p><p><strong>无论在哪里找到方法：在一个对象还是在原型中。在一个方法调用中，<code>this</code> 始终是点符号 <code>.</code> 前面的对象。</strong></p><p>在现代引擎中，从性能的角度来看，我们是从对象还是从原型链获取属性都是没区别的。它们（引擎）会记住在哪里找到的该属性，并在下一次请求中重用它。</p><h3 id="原型方法" tabindex="-1">原型方法 <a class="header-anchor" href="#原型方法" aria-label="Permalink to &quot;原型方法&quot;">​</a></h3><p>Object.create(proto, [descriptors]) —— 利用给定的 proto 作为 [[Prototype]] 和可选的属性描述来创建一个空对象。</p><p>Object.getPrototypeOf(obj) —— 返回对象 obj 的 [[Prototype]]。</p><p>Object.setPrototypeOf(obj, proto) —— 将对象 obj 的 [[Prototype]] 设置为 proto。</p><h2 id="promise-async-await" tabindex="-1">Promise async/await <a class="header-anchor" href="#promise-async-await" aria-label="Permalink to &quot;Promise async/await&quot;">​</a></h2><p>Promise 对象的构造器（constructor）语法如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> promise </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// executor（生产者代码，“歌手”）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>传递给 <code>new Promise</code> 的函数被称为 <strong>executor</strong>。当 <code>new Promise</code> 被创建，executor 会自动运行并尝试执行一项工作。尝试结束后，如果成功则调用 resolve，如果出现 error 则调用 reject。：</p><ul><li><code>resolve(value)</code> — 如果任务成功，并返回结果 <code>value</code>。</li><li><code>reject(error)</code> — 如果出现了 error，调用reject，返回error</li></ul><p>由 <code>new Promise</code> 构造器返回的 <code>promise</code> 对象具有以下内部属性：</p><ul><li><code>state</code> — 最初是 <code>&quot;pending&quot;</code>，然后在 <code>resolve</code> 被调用时变为 <code>&quot;fulfilled&quot;</code>，或者在 <code>reject</code> 被调用时变为 <code>&quot;rejected&quot;</code>。</li><li><code>result</code> — 最初是 <code>undefined</code>，然后在 <code>resolve(value)</code> 被调用时变为 <code>value</code>，或者在 <code>reject(error)</code> 被调用时变为 <code>error</code>。</li></ul><p><strong>Promise 对象的 <code>state</code> 和 <code>result</code> 属性都是内部的。我们无法直接访问它们。</strong></p><h3 id="消费者-then-catch-finally" tabindex="-1">消费者：then，catch，finally <a class="header-anchor" href="#消费者-then-catch-finally" aria-label="Permalink to &quot;消费者：then，catch，finally&quot;">​</a></h3><p>Promise 对象充当的是 executor（“生产者代码”或“歌手”）和消费函数（“粉丝”）之间的连接，后者将接收结果或 error。可以通过使用 <code>.then</code>、<code>.catch</code> 和 <code>.finally</code> 方法为消费函数进行注册。</p><p>then</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">result</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* handle a successful result */</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* handle an error */</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">then 的第一个参数是一个函数，该函数将在 promise resolved 后运行并接收结果。</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">then 的第二个参数也是一个函数，该函数将在 promise rejected 后运行并接收 error。</span></span></code></pre></div><p>catch</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> promise </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Whoops!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// .catch(f) 与 promise.then(null, f) 一样</span></span>
<span class="line"><span style="color:#A6ACCD;">promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(alert)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1 秒后显示 &quot;Error: Whoops!&quot;</span></span></code></pre></div><p>finally</p><p><code>.finally(f)</code> 调用与 <code>.then(f, f)</code> 类似，在某种意义上，<code>f</code> 总是在 promise 被 settled 时运行：即 promise 被 resolve 或 reject。</p><p>不同于老式的回调函数，Promise约定：</p><ul><li>在本轮 事件循环 运行完成之前，回调函数是不会被调用的。</li><li>即使异步操作已经完成（成功或失败），在这之后通过 then() 添加的回调函数也会被调用。</li><li>通过多次调用 then() 可以添加多个回调函数，它们会按照插入顺序进行执行 --&gt; <strong>链式调用</strong>（<strong>chaining</strong>）</li></ul><h3 id="async-await" tabindex="-1">Async&amp;Await <a class="header-anchor" href="#async-await" aria-label="Permalink to &quot;Async&amp;Await&quot;">​</a></h3><p>函数前面的关键字 <code>async</code> 有两个作用：</p><ol><li>让这个函数总是返回一个 promise。</li><li>允许在该函数内使用 <code>await</code>。</li></ol><p>Promise 前的关键字 <code>await</code> 使 JavaScript 引擎等待该 promise settle，然后：</p><ol><li>如果有 error，就会抛出异常 — 就像那里调用了 <code>throw error</code> 一样。</li><li>否则，就返回结果。</li></ol><p>这两个关键字一起提供了一个很好的用来编写异步代码的框架，这种代码易于阅读也易于编写。</p><h3 id="事件循环-微任务和宏任务" tabindex="-1">事件循环：微任务和宏任务 <a class="header-anchor" href="#事件循环-微任务和宏任务" aria-label="Permalink to &quot;事件循环：微任务和宏任务&quot;">​</a></h3><p>浏览器中 JavaScript 的执行流程和 Node.js 中的流程都是基于 <strong>事件循环</strong> 的。</p><p><strong>事件循环</strong> 的概念非常简单。它是一个在 JavaScript 引擎等待任务，执行任务和进入休眠状态等待更多任务这几个状态之间转换的无限循环。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">waitForMessage</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">processNextMessage</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>一个任务到来时，引擎可能正处于繁忙状态，那么这个任务就会被排入队列。多个任务组成了一个队列，即所谓的“宏任务队列”（v8 术语）</p><p><strong>每个宏任务之后，引擎会立即执行微任务队列中的所有任务，然后再执行其他的宏任务，或渲染，或进行其他任何操作。</strong></p><p>事件循环算法：</p><ol><li>从 <strong>宏任务</strong> 队列（例如 “script”）中出队（dequeue）并执行最早的任务。</li><li>执行所有微任务： <ul><li>当微任务队列非空时： <ul><li>出队（dequeue）并执行最早的微任务。</li></ul></li></ul></li><li>执行渲染，如果有。</li><li>如果宏任务队列为空，则休眠直到出现宏任务。</li><li>转到步骤 1。</li></ol><p>安排（schedule）一个新的 <strong>宏任务</strong>：</p><ul><li>使用零延迟的 <code>setTimeout(f)</code>。</li></ul><p>它可被用于将繁重的计算任务拆分成多个部分，以使浏览器能够对用户事件作出反应，并在任务的各部分之间显示任务进度。</p><p>此外，也被用于在事件处理程序中，将一个行为（action）安排（schedule）在事件被完全处理（冒泡完成）后。</p><p>安排一个新的 <strong>微任务</strong>：</p><ul><li>使用 <code>queueMicrotask(f)</code>。</li><li>promise 处理程序也会通过微任务队列。</li></ul><p>在微任务之间没有 UI 或网络事件的处理：它们一个立即接一个地执行。</p><p>所以，我们可以使用 <code>queueMicrotask</code> 来在保持环境状态一致的情况下，异步地执行一个函数。</p><p>用例1</p><p>假设我们有一个 CPU 过载任务。通过将大任务拆分成多个小任务来避免这个问题。</p><p>用例2</p><p>对浏览器脚本中的过载型任务进行拆分的另一个好处是，我们可以显示进度指示。</p><p>用例3</p><p>在事件之后做一些事情</p><p>在事件处理程序中，我们可能会决定推迟某些行为，直到事件冒泡并在所有级别上得到处理后。我们可以通过将该代码包装到零延迟的 <code>setTimeout</code> 中来做到这一点。</p><h2 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h2><h3 id="什么是模块" tabindex="-1">什么是模块 <a class="header-anchor" href="#什么是模块" aria-label="Permalink to &quot;什么是模块&quot;">​</a></h3><p>一个模块（module）就是一个文件。一个脚本就是一个模块。模块可以相互加载，并可以使用特殊的指令 <code>export</code> 和 <code>import</code> 来交换功能，从另一个模块调用一个模块的函数：</p><ul><li><code>export</code> 关键字标记了可以从当前模块外部访问的变量和函数。</li><li><code>import</code> 关键字允许从其他模块导入功能。</li></ul><h3 id="核心功能" tabindex="-1">核心功能 <a class="header-anchor" href="#核心功能" aria-label="Permalink to &quot;核心功能&quot;">​</a></h3><ol><li>始终使用 <code>use strict</code></li><li>模块级作用域：每个模块都有自己的顶级作用域（top-level scope）。换句话说，一个模块中的顶级作用域变量和函数在其他脚本中是不可见的。</li><li>模块解析：如果同一个模块被导入到多个其他位置（或多个文件），那么它的代码仅会在第一次导入时执行，然后将导出（export）的内容提供给所有的导入（importer）。即<strong>模块只被执行一次</strong></li><li>i<wbr>mport.meta：包含关于当前模块的信息。</li><li>副作用（side-effect）：函数副作用指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量（函数外的变量），修改参数或改变外部存储。</li></ol><h3 id="模块特性" tabindex="-1">模块特性 <a class="header-anchor" href="#模块特性" aria-label="Permalink to &quot;模块特性&quot;">​</a></h3><ol><li>模块与 defer 特性对外部脚本和内联脚本（inline script）的影响相同： <ol><li>下载外部模块脚本 <code>&lt;script type=&quot;module&quot; src=&quot;...&quot;&gt;</code> 不会阻塞 HTML 的处理，它们会与其他资源并行加载。</li><li>模块脚本会等到 HTML 文档完全准备就绪（即使它们很小并且比 HTML 加载速度更快），然后才会运行。</li><li>保持脚本的相对顺序：在文档中排在前面的脚本先执行。</li></ol></li><li>Async 适用于内联脚本（inline script）异步脚本会在准备好后立即运行，独立于其他脚本或 HTML 文档。适用于例如计数器，广告，文档级事件监听器的场景</li><li>兼容性，在 script 标签中使用 nomodule 属性，可以确保向后兼容。</li><li>不允许裸模块（“bare” module）：<code>import</code> 必须给出相对或绝对的 URL 路径。没有任何路径的模块被称为“裸（bare）”模块。</li><li>要从另一个源（域/协议/端口）加载外部脚本，需要 CORS header。</li></ol><h3 id="构建工具-如webpack" tabindex="-1">构建工具（如Webpack） <a class="header-anchor" href="#构建工具-如webpack" aria-label="Permalink to &quot;构建工具（如Webpack）&quot;">​</a></h3><p>它们可以更好地控制模块的解析方式，允许我们使用裸模块和更多的功能，例如 CSS/HTML 模块等。</p><p>构建工具做以下这些事儿：</p><ol><li>从一个打算放在 HTML 中的 <code>&lt;script type=&quot;module&quot;&gt;</code> “主”模块开始。</li><li>分析它的依赖：它的导入，以及它的导入的导入等。</li><li>使用所有模块构建一个文件（或者多个文件，这是可调的），并用打包函数（bundler function）替代原生的 <code>import</code> 调用，以使其正常工作。还支持像 HTML/CSS 模块等“特殊”的模块类型。</li><li>在处理过程中，可能会应用其他转换和优化： <ul><li>删除无法访问的代码。</li><li>删除未使用的导出（“tree-shaking”）。</li><li>删除特定于开发的像 <code>console</code> 和 <code>debugger</code> 这样的语句。</li><li>可以使用 <a href="https://babeljs.io/" target="_blank" rel="noreferrer">Babel</a> 将前沿的现代的 JavaScript 语法转换为具有类似功能的旧的 JavaScript 语法。</li><li>压缩生成的文件（删除空格，用短的名字替换变量等）。</li></ul></li></ol><p>如果我们使用打包工具，那么脚本会被打包进一个单一文件（或者几个文件），在这些脚本中的 <code>import/export</code> 语句会被替换成特殊的打包函数（bundler function）。因此，最终打包好的脚本中不包含任何 <code>import/export</code>，它也不需要 <code>type=&quot;module&quot;</code>，我们可以将其放入常规的 <code>&lt;script&gt;</code></p><h3 id="导出export" tabindex="-1">导出export <a class="header-anchor" href="#导出export" aria-label="Permalink to &quot;导出export&quot;">​</a></h3><p><code>export</code>语句用于从模块中导出实时绑定的函数、对象或原始值；这些导出的内容如有修改，将实时更新。但在导入时只能被读取，不能被导入模块修改。</p><h3 id="命名导出-每个模块包含任意数量" tabindex="-1">命名导出（每个模块包含任意数量） <a class="header-anchor" href="#命名导出-每个模块包含任意数量" aria-label="Permalink to &quot;命名导出（每个模块包含任意数量）&quot;">​</a></h3><blockquote><p>在导出多个值时，命名导出非常有用。在导入期间，必须使用相应对象的相同名称。</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导出事先定义的特性</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myFunction</span><span style="color:#F07178;">，</span><span style="color:#A6ACCD;">myVariable</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 导出单个特性（可以导出var，let，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//const,function,class）</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> myVariable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sqrt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">myFunction</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span></code></pre></div><h3 id="默认导出-每个模块包含一个" tabindex="-1">默认导出（每个模块包含一个） <a class="header-anchor" href="#默认导出-每个模块包含一个" aria-label="Permalink to &quot;默认导出（每个模块包含一个）&quot;">​</a></h3><blockquote><p>可以使用任何名称导入默认导出；要导出一个值或要的模块中的返回值</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导出事先定义的特性作为默认值</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myFunction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 导出单个特性作为默认值</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">..</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 每个导出都覆盖前一个导出</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导出单个特性</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> …</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nameN</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// also var, const</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> …</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> …</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> …</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nameN</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// also var, const</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FunctionName</span><span style="color:#89DDFF;">(){...}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ClassName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 导出列表</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> …</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nameN</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 重命名导出</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">variable1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">variable2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> …</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nameN</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 解构导出并重命名</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> name1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 默认导出</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> expression</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">…</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> … </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// also class, function*</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">name1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">…</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> … </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// also class, function*</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> … </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 导出模块合集</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> …</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// does not set the default export</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> name1 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> …</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Draft ECMAScript® 2O21</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> …</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nameN</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> …</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">import1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">import2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> …</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nameN</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> …</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> …</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">                               </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//模块重定向(合并模块)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//将两个模块的导出，统一导入在一个父模块中，再通过一个顶层模块将两个不同模块的内容导入到顶层模块。</span></span></code></pre></div><h3 id="导入import" tabindex="-1">导入import <a class="header-anchor" href="#导入import" aria-label="Permalink to &quot;导入import&quot;">​</a></h3><ul><li>静态<code>import</code> 语句用于导入由另一个模块导出的绑定。<code>import</code> 语句只能在声明了 <code>type=&quot;module&quot;</code> 的 <code>script</code> 的标签中使用。</li><li>动态 <code>import()</code>，它不需要依赖 <code>type=&quot;module&quot;</code> 的script标签。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//导入默认值（也可与上述形式结合，“，” 隔开）</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> defaultExport </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> defaultExport</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">export</span><span style="color:#F07178;"> [ </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [...] ] </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//导入整个模块的内容</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//导入单个接口</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">export</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//导入带有别名的接口</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">export</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alias</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//导入多个接口</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">export1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">export2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//导入多个接口</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name/path/to/specific/un-exported/file</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//导入时重命名多个接口</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">export1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">export2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">alias2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [...] </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//仅为副作用导入一个模块</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> defaultExport</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module-name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//defaultExport 导入模块的默认导出接口的引用名。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//module-name 要导入的模块。通常是包含目标模块的.js文件的相对或绝对路径名，可以不包括.js扩展名。某些特定的打包工具可能允许或需要使用扩展或依赖文件，它会检查比对你的运行环境。只允许单引号和双引号的字符串。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//name 导入模块对象整体的别名，在引用导入模块时，它将作为一个命名空间来使用。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//export, exportN 被导入模块的导出接口的名称。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//alias, aliasN 将引用指定的导入的名称。</span></span></code></pre></div><h3 id="动态导入" tabindex="-1">动态导入 <a class="header-anchor" href="#动态导入" aria-label="Permalink to &quot;动态导入&quot;">​</a></h3><p>标准用法的import导入的模块是静态的，会使所有被导入的模块，在加载时就被编译（无法做到按需编译，降低首页加载速度）。而动态导入可以像调用函数一样动态导入模块，以这种方式调用，将返回一个 <code>promise</code>。常用场景有：</p><ul><li>当静态导入的模块很明显的降低了代码的加载速度且被使用的可能性很低，或者并不需要马上使用它。</li><li>当静态导入的模块很明显的占用了大量系统内存且被使用的可能性很低。</li><li>当被导入的模块，在加载时并不存在，需要异步获取</li><li>当导入模块的说明符，需要动态构建。（静态导入只能使用静态说明符）</li><li>当被导入的模块有副作用（这里说的副作用，可以理解为模块中会直接运行的代码），这些副作用只有在触发了某些条件才被需要时。（原则上来说，模块不能有副作用，但是很多时候，你无法控制你所依赖的模块的内容）</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//这种方式调用，将返回一个 promise</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/modules/my-module.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Do something with the module.</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//支持 await 关键字</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> module </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/modules/my-module.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="模块的特点" tabindex="-1">模块的特点 <a class="header-anchor" href="#模块的特点" aria-label="Permalink to &quot;模块的特点&quot;">​</a></h3><ol><li>一个模块就是一个文件。浏览器需要使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 以使 <code>import/export</code> 可以工作。</li><li>模块只通过 HTTP(s) 工作，在本地文件则不行，即：通过 <code>file://</code> 协议在本地打开一个网页时 <code>import/export</code> 指令不起作用，需要使用本地 Web 服务器。</li><li>模块始终默认使用 <code>use strict</code>，严格模式下的一切限制均有效</li><li>每个模块都有自己的顶级作用域（top-level scope）。换句话说，一个模块中的顶级作用域变量和函数在其他脚本中是不可见的。</li><li>模块代码只执行一次。导出仅创建一次，然后会在导入之间共享。</li><li>在一个模块中，顶级 <code>this</code> 是 undefined，非模块脚本的顶级 <code>this</code> 是全局对象。</li><li>模块脚本 总是 被延迟的，与 defer 特性 对外部脚本和内联脚本（inline script）的影响相同。 <ol><li>下载外部模块脚本 <code>&lt;script type=&quot;module&quot; src=&quot;...&quot;&gt;</code> 不会阻塞 HTML 的处理，它们会与其他资源并行加载。</li><li>模块脚本会等到 HTML 文档完全准备就绪（即使它们很小并且比 HTML 加载速度更快），然后才会运行。</li><li>保持脚本的相对顺序：在文档中排在前面的脚本先执行。</li></ol></li><li>Async 适用于内联脚本（inline script）</li><li>具有 <code>type=&quot;module&quot;</code> 的外部脚本（external script）且相同 <code>src</code> 的外部脚本仅运行一次；从另一个源（例如另一个网站）获取的外部脚本需要 CORS header(不能使用JSONP)</li><li>在浏览器中，<code>import</code> 必须给出相对或绝对的 URL 路径。没有任何路径的模块被称为“裸（bare）”模块。在 <code>import</code> 中不允许这种模块。</li><li>旧时的浏览器不理解 <code>type=&quot;module&quot;</code>。未知类型的脚本会被忽略。对此，我们可以使用 <code>nomodule</code> 特性来提供一个后备</li></ol><p>函数进阶内容</p><p>对象属性配置</p><p>Generator，高级 iteration</p><p>杂项</p><p>浏览器内核</p><p>IE --&gt; trident</p><p>chrome --&gt; webkit/blink</p><p>firefox --&gt; gecko</p><p>opera --&gt; presto</p><p>Safari --&gt; webkit</p><p>脚本调用策略</p><ul><li><p>如果脚本无需等待页面解析，且无依赖独立运行，那么应使用 <code>async</code>。</p></li><li><p>如果脚本需要等待页面解析，且依赖于其它脚本，调用这些脚本时应使用 <code>defer</code>，将关联的脚本按所需顺序置于 HTML 中。</p></li></ul><h2 id="js交互与输出" tabindex="-1">JS交互与输出 <a class="header-anchor" href="#js交互与输出" aria-label="Permalink to &quot;JS交互与输出&quot;">​</a></h2><ol><li>alert()：只能输出一个内容</li><li>console.log()：字符串默认颜色是黑色，数字颜色是蓝色；可以输出多个内容，中间逗号隔开；</li><li>document.write()：可识别HMTL标签</li><li>innerHTML 往标签里面写入文字</li><li>修改HTML元素属性和样式</li><li>prompt</li><li>confirm</li></ol><p>alert弹出的窗口称为‘ <strong>模态窗</strong>’，用户不能与其它部分交互直到用户点击确定按钮。</p><h3 id="prompt" tabindex="-1">prompt <a class="header-anchor" href="#prompt" aria-label="Permalink to &quot;prompt&quot;">​</a></h3><p>result = prompt(title, [default]); 浏览器会显示一个带有文本消息的模态窗口，还有 input 框和确定/取消按钮。</p><ul><li><p>title 显示给用户的文本</p></li><li><p>default 可选的第二个参数，指定 input 框的初始值。</p><blockquote><p>语法中的方括号 <code>[...]</code>周围的方括号表示该参数是可选的，不是必需的。</p></blockquote></li></ul><p>result 是prompt函数的返回值，用户输入一些内容，确定后result获取该文本，或者按取消键，此时函数返回null；如用户不输入内容，并且第二参数没有给默认值，则内容为undefined</p><h3 id="confirm" tabindex="-1">confirm <a class="header-anchor" href="#confirm" aria-label="Permalink to &quot;confirm&quot;">​</a></h3><p>result = confirm(question); <code>confirm</code> 函数显示一个带有 <code>question</code> 以及确定和取消两个按钮的模态窗口。点击确定返回 <code>true</code>，点击取消返回 <code>false</code>。</p><p>alert prompt confirm 都是 模态的：它们暂停脚本的执行，并且不允许用户与该页面的其余部分进行交互，直到窗口被解除。</p><h4 id="交互窗口的限制" tabindex="-1">交互窗口的限制 <a class="header-anchor" href="#交互窗口的限制" aria-label="Permalink to &quot;交互窗口的限制&quot;">​</a></h4><ol><li>模态窗口的确切位置由浏览器决定。通常在页面中心。</li><li>窗口的确切外观也取决于浏览器。我们不能修改它。</li></ol><h2 id="变量提升" tabindex="-1">变量提升 <a class="header-anchor" href="#变量提升" aria-label="Permalink to &quot;变量提升&quot;">​</a></h2><p>“hoisting” 把所有的变量声明移动到函数或者全局代码的开头位置。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。</p><p><strong>const</strong>常量是块级范围的，非常类似用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noreferrer">let</a> 语句定义的变量。但常量的值是无法（通过重新赋值）改变的，也不能被重新声明。</p><p><strong>let</strong> 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。</p><p>前置时-- ++和后置时-- ++单独运算时没有区别，参与到其他运算时，前置是先算自己再参与运算，后置是先参与运算再算自己。</p><p>1 变量提升 其赋值不会被提升</p><p>2 函数提升，函数体会被提升，但函数表达式在执行时，只提升变量，不提升函数体，此时发起调用，会报错。</p><p>3 正常顺序下，函数与变量重名，变量优先级高于函数；触发变量提升时，函数优先级高。优先级高被提升到更靠前的位置。</p><p>4 函数如果重名，两种情况下均是后面覆盖前面。</p><h2 id="表达式和运算符" tabindex="-1">表达式和运算符 <a class="header-anchor" href="#表达式和运算符" aria-label="Permalink to &quot;表达式和运算符&quot;">​</a></h2><h2 id="yield" tabindex="-1">yield <a class="header-anchor" href="#yield" aria-label="Permalink to &quot;yield&quot;">​</a></h2><p>yield 关键字用来暂停和恢复一个生成器函数（(function* 或遗留的生成器函数）</p><p>[rv] = yield [expression];</p><p>expression 定义通过迭代器协议从生成器函数返回的值。如果省略，则返回undefined。</p><p>rv 返回传递给生成器的next()方法的可选值，以恢复其执行。</p><p>yield关键字实际返回一个IteratorResult对象，它有两个属性，value和done。value属性是对yield表达式求值的结果，而done是false，表示生成器函数尚未完全完成。</p><h2 id="this" tabindex="-1"><a href="./&#39;https://juejin.cn/post/6844903680446038023&#39;.html">This</a> <a class="header-anchor" href="#this" aria-label="Permalink to &quot;[This](&#39;https://juejin.cn/post/6844903680446038023&#39;)&quot;">​</a></h2><p>全局作用域、普通函数、定时器、行间事件触发函数、系统自带函数及其调用传入的回调函数里 this --&gt; Window</p><p>绑定给标签事件的函数里的this，代指的该标签</p><p>方法调用中，谁调用这个方法，这个方法的this指向谁 obj.func() this --&gt; obj</p><p>构造函数中this指向这个构造函数的实例</p><p>在一个模块中，顶级 <code>this</code> 是 undefined。</p><p>全局上下文</p><p>全局执行环境中（在任何函数体外部）<code>this</code> 都指向全局对象。</p><p>函数上下文</p><p><code>this</code>的值取决于函数被调用的方式。</p><p>浏览器中，全局对象是window</p><p>严格模式下，如果进入执行环境时没有设置 <code>this</code> 的值，<code>this</code> 会保持为 <code>undefined</code></p><h2 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h2><h3 id="预编译" tabindex="-1">预编译 <a class="header-anchor" href="#预编译" aria-label="Permalink to &quot;预编译&quot;">​</a></h3><p>函数执行前 ：1. 创建Activation Object对象（执行期上下文）2. 找形参和变量声明作为AO属性名（默认undefined） 3. 实参 --&gt; 形参 4. 函数体内找函数声明 值赋予函数体</p><h3 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h3><p>作用域 --&gt; 执行期上下文 集合 -- 作用域链</p><p>函数域是指函数声明时的所在的地方，或者函数在顶层被声明时指整个程序。</p><p><strong>匿名函数</strong> — 通常将匿名函数与事件处理程序一起使用；还可以将匿名函数分配为变量的值（用变量名+( ) 就可以调用匿名函数。）</p><p>函数提升仅适用于函数声明，而不适用于函数表达式。</p><p>作用域规则不适用于循环（for（）{...}）和条件块（if（）{...}） ，他们不是函数；</p><p><strong>难点：自定义函数时什么时候要参，加多少参，什么时候要返回值，返回值是什么。</strong></p><p>函数无参时可设定默认值</p><p>函数名后面的这个括号叫做**“函数调用运算符”**（function invocation operator）。你只有在想直接调用函数的地方才这么写。 同样要重视的是, <strong>匿名函数里面的代码也不是直接运行的,</strong> 只要代码在函数作用域内。<strong>函数名已经是函数本身；</strong></p><p>没有被赋值的参数 其值为undefined；</p><p>如果一个函数有返回值，必须要接收或直接使用，不然此次函数运行无意义；</p><p>return [[expression]]; 当在函数体中使用<code>return</code>语句时，函数将会停止执行。如果指定一个值，则这个值返回给函数调用者。如果省略该值，则返回undefined。</p><p>tips：JavaScript中的函数表达式没有提升,不像函数声明,你在定义函数表达式之前不能使用函数表达式</p><h3 id="构造函数-vs-函数声明-vs-函数表达式" tabindex="-1">构造函数 vs 函数声明 vs 函数表达式 <a class="header-anchor" href="#构造函数-vs-函数声明-vs-函数表达式" aria-label="Permalink to &quot;构造函数 vs 函数声明 vs 函数表达式&quot;">​</a></h3><p>一个用Function构造函数定义的函数,被赋值给变量multiply：</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var multiply = new Function(&#39;x&#39;, &#39;y&#39;, &#39;return x * y&#39;);</span></span></code></pre></div><p>一个名为<code>multiply</code>的函数声明：</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function multiply(x, y) {</span></span>
<span class="line"><span style="color:#A6ACCD;">   return x * y;</span></span>
<span class="line"><span style="color:#A6ACCD;">} // 没有分号</span></span></code></pre></div><p>一个匿名函数的函数表达式，被赋值给变量<code>multiply</code>：</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var multiply = function(x, y) {</span></span>
<span class="line"><span style="color:#A6ACCD;">   return x * y;</span></span>
<span class="line"><span style="color:#A6ACCD;"> };</span></span></code></pre></div><p>一个命名为<code>func_named</code>的函数的函数表达式，被赋值给变量<code>multiply</code>：</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var multiply = function func_name(x, y) {</span></span>
<span class="line"><span style="color:#A6ACCD;">   return x * y;</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span></code></pre></div><p>函数名不能被改变，但函数的变量却能够被再分配。</p><p>函数名只能在函数体内使用。倘若在函数体外使用函数名将会导致错误（如果函数之前是通过一个var语句声明的则是undefined）。</p><p>函数内部默认有一个arguments数组的形参，如需不固定形参个数时则函数一个参数都不要写。</p><h3 id="iife-立即调用函数表达式" tabindex="-1">IIFE（立即调用函数表达式） <a class="header-anchor" href="#iife-立即调用函数表达式" aria-label="Permalink to &quot;IIFE（立即调用函数表达式）&quot;">​</a></h3><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(function () {</span></span>
<span class="line"><span style="color:#A6ACCD;">    statements</span></span>
<span class="line"><span style="color:#A6ACCD;">})();</span></span></code></pre></div><p>这是一个被称为 自执行匿名函数 的设计模式，主要包含两部分。第一部分是包围在 <code>圆括号运算符</code> <code>()</code> 里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。第二部分再一次使用 <code>()</code> 创建了一个立即执行函数表达式，JavaScript 引擎到此将直接执行函数。当函数变成立即执行的函数表达式时，表达式中的变量不能从外部访问。</p><h3 id="闭包-closures" tabindex="-1">闭包（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noreferrer"><strong>Closures</strong></a>） <a class="header-anchor" href="#闭包-closures" aria-label="Permalink to &quot;闭包（[**Closures**](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)）&quot;">​</a></h3><p><em>闭包</em>是由函数以及声明该函数的词法环境组合而成的。该环境包含了这个闭包创建时作用域内的任何局部变量。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</p><p>作用：模拟私有方法--&gt; <a href="http://www.google.com/search?q=javascript+module+pattern" title="http://www.google.com/search?q=javascript+module+pattern" target="_blank" rel="noreferrer">模块模式（module pattern）</a> 数据隐藏和封装</p><h3 id="回调函数" tabindex="-1">回调函数 <a class="header-anchor" href="#回调函数" aria-label="Permalink to &quot;回调函数&quot;">​</a></h3><p>被作为实参传入另一函数，并在该外部函数内被调用，用以来完成某些任务的函数，称为回调函数。</p>`,463),p=[e];function t(c,r,i,y,d,D){return l(),a("div",null,p)}const C=s(n,[["render",t]]);export{A as __pageData,C as default};
