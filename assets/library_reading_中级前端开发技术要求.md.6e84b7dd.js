import{_ as l,c as i,o as a,U as e}from"./chunks/framework.8a9b1808.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"library/reading/中级前端开发技术要求.md","filePath":"library/reading/中级前端开发技术要求.md"}'),r={name:"library/reading/中级前端开发技术要求.md"},o=e('<h2 id="程度词汇" tabindex="-1">程度词汇 <a class="header-anchor" href="#程度词汇" aria-label="Permalink to &quot;程度词汇&quot;">​</a></h2><h3 id="不了解" tabindex="-1">不了解 <a class="header-anchor" href="#不了解" aria-label="Permalink to &quot;不了解&quot;">​</a></h3><ul><li>只是听过名字</li><li>只是大概的翻过文档</li><li>没有写过关于这项技术的代码</li><li>需要同时具备当前等级所有特性</li><li>高等级描述包含低等级描述特性</li></ul><h3 id="了解" tabindex="-1">了解 <a class="header-anchor" href="#了解" aria-label="Permalink to &quot;了解&quot;">​</a></h3><ul><li>未在开发中使用过，但写过 demo</li><li>阅读过相关文档或者视频教程</li><li>可以用五分钟内向他人介绍这项技术的特点和应用场景</li></ul><h3 id="掌握" tabindex="-1">掌握 <a class="header-anchor" href="#掌握" aria-label="Permalink to &quot;掌握&quot;">​</a></h3><ul><li>曾在项目中大量使用过此技术</li><li>可以自如的使用这项技术进行开发</li><li>参与技术论坛区讨论或者写过相关文章</li></ul><h3 id="熟悉" tabindex="-1">熟悉 <a class="header-anchor" href="#熟悉" aria-label="Permalink to &quot;熟悉&quot;">​</a></h3><ul><li>曾在项目中使用过</li><li>通读过相关文档</li><li>可以快速对相关问题定位到文档内容中</li><li>了解一些较冷僻的相关语法糖和 api 等</li></ul><h3 id="精通" tabindex="-1">精通 <a class="header-anchor" href="#精通" aria-label="Permalink to &quot;精通&quot;">​</a></h3><ul><li>了解背后的原理和规范</li><li>动手重写过实现代码</li><li>可以以为此为基础做二次开发</li><li>能读懂源码并做出修改</li></ul><h2 id="考察方式" tabindex="-1">考察方式 <a class="header-anchor" href="#考察方式" aria-label="Permalink to &quot;考察方式&quot;">​</a></h2><h3 id="手写代码" tabindex="-1">手写代码 <a class="header-anchor" href="#手写代码" aria-label="Permalink to &quot;手写代码&quot;">​</a></h3><p>可以借助 emmet 或者编辑器的提醒，非复制粘贴整段代码的方式书写代码。</p><h3 id="记忆性考察" tabindex="-1">记忆性考察 <a class="header-anchor" href="#记忆性考察" aria-label="Permalink to &quot;记忆性考察&quot;">​</a></h3><p>需要背下来的内容，不可以借助搜索引擎。比如大多数关键字的拼写，对于超长关键词可以借助编辑器完成输入。 一些常用的知识点也会要求记忆性考察，比如盒模型和选择器规则，因为日常使用频度较高，理应记住。</p><h3 id="索引性考察" tabindex="-1">索引性考察 <a class="header-anchor" href="#索引性考察" aria-label="Permalink to &quot;索引性考察&quot;">​</a></h3><p>可以一次性在搜索引擎通过技术关键字找到解决方案。比如： 我们希望做一个特殊效果的轮播图，文字和背景图不同步滚动，背景图每次只是水平偏移一小截，文字则是整页的滚动 面对这个描述能够识别出搜索关键词为 “视差滚动”</p><h3 id="理解性考察" tabindex="-1">理解性考察 <a class="header-anchor" href="#理解性考察" aria-label="Permalink to &quot;理解性考察&quot;">​</a></h3><p>要求能够通过代码的方式展现知识点以及和其他知识点的对比。 能够在某应用场景内设计出该技术的使用方案。 能够讲清其背后的数学原理或者逻辑关系。</p><h2 id="面试意图" tabindex="-1">面试意图 <a class="header-anchor" href="#面试意图" aria-label="Permalink to &quot;面试意图&quot;">​</a></h2><h3 id="正面" tabindex="-1">正面 <a class="header-anchor" href="#正面" aria-label="Permalink to &quot;正面&quot;">​</a></h3><ol><li>是否具有工作岗位所需要的最低能力</li><li>是否有过类似项目开发经历</li><li>是否掌握工作岗位所需技能</li><li>现场编码解决问题</li><li>正确使用搜索引擎</li><li>能够对之前项目中使用过的技术做出详细解释</li><li>是否对技术有热情</li><li>有在线可访问的代码</li><li>有技术博客</li><li>在技术社区积极回答问题</li><li>关注新技术，并且做过官方 demo 以外的案例</li><li>日常使用技术解决生活中的问题</li><li>成长空间</li><li>计算机专业背景</li><li>良好的算法基础</li><li>良好的表达能力</li><li>做过技术文章翻译</li><li>有至少一项 5 年以上的爱好</li></ol><h3 id="反面" tabindex="-1">反面 <a class="header-anchor" href="#反面" aria-label="Permalink to &quot;反面&quot;">​</a></h3><ol><li>对冷门知识点做记忆性考察</li><li>对过时知识点做解释型</li><li>以回答出问题的个数作为录用指标</li><li>面试应该像测视力一样，一开始从最容易的问题入手，逐步深入，直到无法正确回答。</li><li>如果面试中面试者没有回答对任何问题或者回答对了所有的问题，都不是一次成功的面试。</li></ol><h2 id="面试方式" tabindex="-1">面试方式 <a class="header-anchor" href="#面试方式" aria-label="Permalink to &quot;面试方式&quot;">​</a></h2><ul><li>了解职业经历，确认工作内容。</li><li>通过场景概括出技术能力范围。</li><li>面试前确认，模糊的地方在开始的时候确认。</li><li>参与了哪些项目，在项目中扮演什么角色，完成了哪些编码工作。</li><li>工作的流程是怎么样的，是否有规范（比如 gitflow）工作的经验。</li><li>按照简历的技能列表挑选比较鲜明的做提问。</li><li>对于基础知识，比如 HTTP 协议，以记忆性考察为主；对于正则路由 promise 等技术如果不是近期项目使用过，但是 - 声称掌握，可放宽为索引性考察。</li><li>我常常会进行一个额外的环节，就是让面试人在简历中圈出真实技能，排除注水内容，然后只对圈出内容进行提问。因为在我看来，环境所迫带来的简历注水也不该等同为面试人的品质问题，另一方面，是否能够正确评价自己是程序员的一项重要能力。</li></ul><blockquote><p>我们公司使用的技术栈相关 api 问答，以及根据情况来询问更深层次的语法和用法等</p><p>大约 5~10 个问题，主要引导面试者讲述技术的原理，以及技术的使用形式，以及使用过程中遇到的问题（参看附录）。</p><p>比如面试者声称熟悉 AJAX，我可能会问他 AJAX 使用了 js 的什么对象（原理），什么是异步函数（使用形式），跨域问题有没有遇到过（问题），JSONP 为什么能解决跨域问题（原理），jsonp 返回的内容和 json 有什么不同（使用），jsonp 使用遇到过哪些局限性（问题）…</p><p>按照这个层次递进深入，直到面试者回答吃力或者无法回答。</p><p>一般不打断面试者的叙述，哪怕说的是错误的，也会在整段讲完之后再进行纠正，然后开始下一个话题。</p><p>做实际编码的测试，主要考察编程能力。 选用基本的 js 题目做测试，比如</p><p>在聚会中常玩数七的游戏，七的倍数和带有七的数字都不能说，比如 14,27,28。请找出 1~100 的不能说的数字。</p></blockquote><h3 id="考察的点有" tabindex="-1">考察的点有 <a class="header-anchor" href="#考察的点有" aria-label="Permalink to &quot;考察的点有&quot;">​</a></h3><ul><li>技术栈是否契合</li><li>技术深度</li><li>技术的基础了解程度</li><li>遇到问题的解题思路</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>内容部分知识举例说明了一些常见的技能列表，实际上会根据面试者的简历情况设置问题。</p><p>记忆性内容作为底线要求，如果不能达标，意味着基础不牢，在日后的工作中会在很多基本的问题上搞不清。</p><p>编码环节主要做搜索性考察，因为这是工作的常态形式。使用搜索引擎的能力决定了程序员的日常水平。</p><p>理解性考察对应的是知识点的理解和应用，是否能够把知识点运用到开发中，并且对日常开发中遇到的问题有自己的思考，反应的是面试者的潜力和发展。</p><h2 id="基本功考察" tabindex="-1">基本功考察 <a class="header-anchor" href="#基本功考察" aria-label="Permalink to &quot;基本功考察&quot;">​</a></h2><h3 id="关于-html" tabindex="-1">关于 Html <a class="header-anchor" href="#关于-html" aria-label="Permalink to &quot;关于 Html&quot;">​</a></h3><ul><li>html 语义化标签的理解; 结构化的理解; 能否写出简洁的 html 结构; SEO 优化</li><li>h5 中新增的属性; 如自定义属性 data, 类名 className 等, 新增表单元素, 拖拽 Drag</li><li>h5 中新增的 API, 修改的 API, 废弃的 API 稍作了解 (离线存储, audio, video)</li></ul><h3 id="关于-css" tabindex="-1">关于 CSS <a class="header-anchor" href="#关于-css" aria-label="Permalink to &quot;关于 CSS&quot;">​</a></h3><ul><li>CSS 选择器 (三大特性)</li><li>BFC 机制</li><li>盒模型</li><li>CSS 模块化开发 (封装); SCSS 和 LESS 的使用</li><li>屏幕适配 以及 页面自适应</li><li>CSS3 中新增的选择器</li><li>CSS3 中新增的属性, transform trasition animation 等…</li></ul><h3 id="关于布局" tabindex="-1">关于布局 <a class="header-anchor" href="#关于布局" aria-label="Permalink to &quot;关于布局&quot;">​</a></h3><ul><li>标准文档流 (padding + margin + 负 margin) + 浮动 float + 定位</li><li>百分比布局 (流式布局): px 单位 用 %num 代替, 占父级元素的百分比</li><li>flex 弹性布局: 主轴 辅助轴的几个属性</li><li>grid 栅格布局: 使用框架中的类名来替代: 本质上还是百分比布局</li></ul><h3 id="关于-js-基础" tabindex="-1">关于 JS 基础 <a class="header-anchor" href="#关于-js-基础" aria-label="Permalink to &quot;关于 JS 基础&quot;">​</a></h3><ul><li>变量数据类型及检测: 基本 + 引用</li><li>运算符: 算术 + 条件 + 逻辑 + 位 + 短路, 隐式转换等</li><li>条件, 循环, 异常处理 if switch(){case xxx:} try catch finally throw</li><li>函数定义, 调用方式 (apply, call, 直接调用), 传参: 实参给形参赋值</li><li>字符串, 数组, 对象常用 API,</li><li>正则表达式</li></ul><h3 id="关于-js-高级" tabindex="-1">关于 JS 高级 <a class="header-anchor" href="#关于-js-高级" aria-label="Permalink to &quot;关于 JS 高级&quot;">​</a></h3><ul><li>作用域, 作用域链, 闭包</li><li>原型, 原型链, 继承</li><li>函数上下文, this 指向</li><li>js 的运行机制, 事件队列和循环</li><li>同步, 异步编程</li></ul><h3 id="关于网络协议" tabindex="-1">关于网络协议 <a class="header-anchor" href="#关于网络协议" aria-label="Permalink to &quot;关于网络协议&quot;">​</a></h3><ul><li>HTTP 协议</li><li>cookie, session, token</li></ul><h3 id="关于-es6-语法" tabindex="-1">关于 ES6 语法 <a class="header-anchor" href="#关于-es6-语法" aria-label="Permalink to &quot;关于 ES6 语法&quot;">​</a></h3><ul><li>字符串, 数组, 对象 扩展的 api</li><li>变量扩展: let const 解构赋值 块级作用域</li><li>函数扩展: 箭头函数 默认参数, rest 参数</li><li>展开运算符, 模板字符串</li><li>set 和 map 数据结构</li><li>迭代器和生成器函数 next 和 yield 的理解</li><li>proxy 对象 属性代理器: 属性的读取（get）和设置（set）相关操作</li><li>promise 对象, 异步编程的解决方案</li><li>async + await: 异步编程的终极方案 promise + generator 的语法糖</li><li>class 语法 构造函数的语法糖</li><li>模块化编程 export + import 的 导出和导入</li></ul><h3 id="vue-基础" tabindex="-1">VUE 基础 <a class="header-anchor" href="#vue-基础" aria-label="Permalink to &quot;VUE 基础&quot;">​</a></h3><ul><li>基本指令</li><li>实例的属性和方法</li><li>实例的生命周期</li><li>组件基础: 创建, 注册, 添加属性方法, 套用等…</li><li>组件通信传值 父子, 兄弟, 跨级</li><li>插槽 slot 等…</li></ul><h3 id="vue-高级" tabindex="-1">VUE 高级 <a class="header-anchor" href="#vue-高级" aria-label="Permalink to &quot;VUE 高级&quot;">​</a></h3><ul><li>vue-router: 搭建 SPA</li><li>路由, 组件的配置</li><li>路由间的传值</li><li>路由跳转</li><li>路由的导航守卫</li><li>记住在 router.js 和 组件页面中的使用方式</li><li>vuex: 状态管理: 数据仓库 store</li><li>实例化仓库的 5 大属性的使用 <code>state</code>, <code>getters</code>, <code>mutations</code>, <code>actions</code>, <code>modules</code></li><li>辅助函数 mapState 等…, 仓库中计算属性的映射, 方便操作</li><li>记住在 store.js 和 组件中 使用方式</li></ul><h3 id="vue-深入-源码阅读" tabindex="-1">VUE 深入, 源码阅读 <a class="header-anchor" href="#vue-深入-源码阅读" aria-label="Permalink to &quot;VUE 深入, 源码阅读&quot;">​</a></h3><ul><li>数据响应式原理</li><li>virtual dom</li><li>diff 算法</li><li>nextTick 等等…</li><li>vue2 和 vue3 的数据绑定</li><li>vue3 的 componest API</li><li>vite 的用法</li></ul><h3 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h3><ul><li><p>掌握原生的 DOM 操作</p></li><li><p>增删查改</p></li><li><p>熟悉 node 和 element 对象</p></li><li><p>事件关于事件的机制</p><ul><li>冒泡和捕获</li><li>事件委托</li><li>自定义事件</li><li>Event 对象</li><li>面向对象</li></ul></li></ul><h3 id="了解面向对象的思想-能够以面向对象的思想构建应用。比如封装一个日历组件-设计对象所需的属性值和方法" tabindex="-1">了解面向对象的思想，能够以面向对象的思想构建应用。比如封装一个日历组件，设计对象所需的属性值和方法 <a class="header-anchor" href="#了解面向对象的思想-能够以面向对象的思想构建应用。比如封装一个日历组件-设计对象所需的属性值和方法" aria-label="Permalink to &quot;了解面向对象的思想，能够以面向对象的思想构建应用。比如封装一个日历组件，设计对象所需的属性值和方法&quot;">​</a></h3><ul><li>new 方法</li><li>继承，派生</li><li>原型和原型链</li></ul><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h3><ul><li>熟悉 Array，String 等的方法</li><li>call 和 apply 方法的使用</li><li>链式调用</li><li>this</li></ul><h3 id="工程化" tabindex="-1">工程化 <a class="header-anchor" href="#工程化" aria-label="Permalink to &quot;工程化&quot;">​</a></h3><ul><li><p>掌握 gulp</p></li><li><p>索引行考察手写 gulp 任务</p></li><li><p>掌握模块化</p><ul><li>CMD 标准</li><li>commonjs</li><li>ES6 模块</li><li>babel 如何使用</li><li>webpack 打包方案</li><li>异步加载</li><li>打包多个文件</li></ul></li><li><p>掌握 webpack</p><ul><li>阅读 webpack 文档</li><li>理解配置文件结构</li><li>合并，注入生效代码部分</li><li>热更新</li></ul></li></ul><h3 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h3><ul><li>命名策略</li><li>嵌套</li><li>变量</li><li>函数</li></ul><h3 id="了解-nodejs-对于前端岗位-nodejs-的使用主要集中在自动化和搭建简单的数据服务器两个方面" tabindex="-1">了解 nodeJS 对于前端岗位，nodejs 的使用主要集中在自动化和搭建简单的数据服务器两个方面 <a class="header-anchor" href="#了解-nodejs-对于前端岗位-nodejs-的使用主要集中在自动化和搭建简单的数据服务器两个方面" aria-label="Permalink to &quot;了解 nodeJS 对于前端岗位，nodejs 的使用主要集中在自动化和搭建简单的数据服务器两个方面&quot;">​</a></h3><ul><li>是否上传过 npm 包</li><li>断点调试法</li><li>express</li><li>插件</li><li>中间件</li><li>路由原理</li><li>HTTP 协议</li><li>数据库查询</li><li>HTML 模板（ejs，pug）</li></ul><h3 id="了解-es6" tabindex="-1">了解 ES6 <a class="header-anchor" href="#了解-es6" aria-label="Permalink to &quot;了解 ES6&quot;">​</a></h3><ul><li>promise</li><li>Generator</li><li>花括号作用域</li><li>class</li><li>数组遍历（ES5）</li><li>严格模式（ES5）</li><li>模块系统</li></ul><h3 id="框架专题" tabindex="-1">框架专题 <a class="header-anchor" href="#框架专题" aria-label="Permalink to &quot;框架专题&quot;">​</a></h3><h4 id="通用" tabindex="-1">通用 <a class="header-anchor" href="#通用" aria-label="Permalink to &quot;通用&quot;">​</a></h4><ul><li>MVC</li><li>双向数据绑定</li><li>单项数据流</li><li>组件化</li><li>生命周期</li><li>路由</li></ul><h4 id="前端模板" tabindex="-1">前端模板 <a class="header-anchor" href="#前端模板" aria-label="Permalink to &quot;前端模板&quot;">​</a></h4><ul><li>横向对比，所用模板的优点</li><li>至少使用过两种以上的前端模板</li></ul><h3 id="工程能力考察" tabindex="-1">工程能力考察 <a class="header-anchor" href="#工程能力考察" aria-label="Permalink to &quot;工程能力考察&quot;">​</a></h3><ol><li><p>项目能力</p><ul><li>vue-cli 脚手架搭建和功能配置 vue.config.js</li><li>vite 的使用和搭建等</li><li>webpack 的常用配置</li><li>项目构建 打包</li></ul></li><li><p>熟悉各类框架的文档…</p><ul><li>UI 框架: Bootstrap, MUI, Element-ui 等</li><li>常用的插件整理, 整理一个自己插件库, 封装自己的方法库, 组件库</li></ul></li><li><p>常用的工具熟练度</p><ul><li>PC 端和移动端开发注意事项和兼容性</li></ul></li><li><p>经验总结: 如何快速确定项目的技术选型</p></li><li><p>坑点总结</p><ul><li>项目遇到坑坑坑!!!</li><li>如何处理，如何提出 issue 并且合作处理</li></ul></li><li><p>git 或者 svn 等使用情况</p></li><li><p>项目中的性能优化记录 (都是细节点… 多记录)</p></li><li><p>需求文档的理解, 可以结合 项目流程图, UML 图</p></li><li><p>问题解决能力: (bug 定位调试, 查找文档, 寻求他人…)</p></li><li><p>平常有记录的习惯吗。</p></li></ol><h3 id="模块化-组件化开发能力" tabindex="-1">模块化, 组件化开发能力 <a class="header-anchor" href="#模块化-组件化开发能力" aria-label="Permalink to &quot;模块化, 组件化开发能力&quot;">​</a></h3><ul><li>项目分类; 各类文件整理, 分类</li><li>各类功能封装</li><li>组件和功能模块的抽离, 解耦, 复用</li></ul><h3 id="内功考察" tabindex="-1">内功考察 <a class="header-anchor" href="#内功考察" aria-label="Permalink to &quot;内功考察&quot;">​</a></h3><ol><li><p>面向对象的编程思想</p><ul><li>类的抽象</li><li>对象的封装, 继承</li><li>为了更好的去管理数据, 分类数据 实现高内聚, 低</li></ul></li><li><p>设计模式</p><p>设计模式感觉也是将面向对象思想 再度抽象成现实中 某些特定模式</p></li><li><p>数据结构和算法</p><ul><li>学习常用的排序搜索算法, 顺序表, 链表, 栈, 队列, 树, 堆 结构等等…</li><li>考验你的 抽象思维 和 数学功底了</li><li>将现实需求 抽象成 计算机代码 的思维能力</li></ul></li></ol><h3 id="附加技能考察" tabindex="-1">附加技能考察 <a class="header-anchor" href="#附加技能考察" aria-label="Permalink to &quot;附加技能考察&quot;">​</a></h3><ol><li><p>学习能力</p><ul><li>持续学习的态度–博客, 笔记记录</li><li>技术论坛活跃度高, 问答多</li><li>GitHub 开源项目参与</li></ul></li><li><p>了解一门后端语言</p><ul><li>node.js, python, php 等…</li><li>数据库 mysql,redis,mongodb. sql 的操作语句, mongo 的操作语句, redis 操作语句</li><li>node + express 搭建本地服务等</li><li>python + django + request + scrapy</li></ul></li><li><p>系统编程</p><ul><li>Linux 命令行操作, 系统文件管理</li><li>多任务, 多线程, 多进程, 协程, 并发, 并行, 串行, 同步, 异步等概念的理解</li></ul></li></ol><p><a href="https://www.toutiao.com/article/6987892311044653605/?traffic_source=&amp;in_ogs=&amp;utm_source=&amp;source=search_tab&amp;utm_medium=wap_search&amp;original_source=&amp;in_tfs=&amp;channel=&amp;source=m_redirect" target="_blank" rel="noreferrer">原文地址</a></p>',84),t=[o];function h(u,n,s,d,c,p){return a(),i("div",null,t)}const q=l(r,[["render",h]]);export{b as __pageData,q as default};
